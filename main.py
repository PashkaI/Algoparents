from aiogram import Bot, Dispatcher, executor, types
import datetime
import time
import requests
import sqlite3
from bs4 import BeautifulSoup, Comment
from apscheduler.schedulers.background import BackgroundScheduler
import subprocess
import os
import sys
import logging
from logging.handlers import RotatingFileHandler

bot = Bot('6024265589:AAEAsVOB-0w-IaeoS3Ach9bZxLxlg9U7MOo')
dp = Dispatcher(bot)

# # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –∏ –∑–∞–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logger = logging.getLogger()
# logger.setLevel(logging.DEBUG)
#
# # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
# file_handler = logging.FileHandler('log.txt', encoding='utf-8')
# file_handler.setLevel(logging.DEBUG)
#
# # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
# formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
# file_handler.setFormatter(formatter)
#
# # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ª–æ–≥–≥–µ—Ä
# logger.addHandler(file_handler)

#  ============= –£–∑–Ω–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞ –∏ –≤—á–µ—Ä–∞ =============
def get_today():
    return datetime.datetime.now()
def get_yesterday():
    return datetime.datetime.now() - datetime.timedelta(days=1)
def get_tomorrow():
    return datetime.datetime.now() + datetime.timedelta(days=1)

scheduler = BackgroundScheduler()
content_today = ''
content_yesterday = ''
content_tomorrow = ''
tibet_today = ''
tibet_yesterday = ''
tibet_tomorrow = ''

#======== –í—ã–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É ============
def StarsDay(data_url):
    print(f'Uploading Chinese content on the date - {data_url}')
    url = f"https://www.mingli.ru/{data_url}"
    soup = BeautifulSoup(requests.get(url).text, 'html.parser')
    content = soup.find('div', class_='Content')
    return content
def TibetHolly(data_url):
    print(f'Uploading Tibetian content on the date - {data_url}')
    url = f"https://tibetastromed.ru/docom.php?tdat={data_url}&tipv=0&type=old&lang=ru"
    soup = BeautifulSoup(requests.get(url).text, 'html.parser')
    content = soup.findAll('p')[1].text
    return content

#======== –í—ã—Ç—è–≥–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–π ============
def MoonDay(data_url):
    global content_today, content_yesterday, content_tomorrow, tibet_today, tibet_yesterday, tibet_tomorrow
    if data_url == 1: data_url = get_yesterday()
    if data_url == 2: data_url = get_today()
    if data_url == 3: data_url = get_tomorrow()
    url = f"https://www.mingli.ru/{data_url.strftime('%d-%m-%Y')}"
    urlt = f"https://tibetastromed.ru/docom.php?tdat={data_url.strftime('%m/%d/%Y')}&tipv=0&type=old&lang=ru"
    soup = BeautifulSoup(requests.get(url).text, 'html.parser')
    soupt = BeautifulSoup(requests.get(urlt).text, 'html.parser')
    try:# –í—ã—Ç—è–≥–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Å–∞–π—Ç–∞
        content = soup.find('div', class_='Content')
        tibet = soupt.findAll('p')[1].text
    except:
        content = ''
        tibet = ''
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    if data_url.strftime('%d-%m-%Y') == get_yesterday().strftime('%d-%m-%Y'):
        content_yesterday = content
        tibet_yesterday = tibet
        print(f"–í—ã–≥—Ä—É–∑–∫–∞ >mingli< {data_url.strftime('%d-%m-%Y')}:  "
              f"{content_yesterday.find('h5', class_='CzjanChu').text}   "
              f"{get_today().strftime('%d-%m-%Y %H:%M:%S')}")
        print(f"–í—ã–≥—Ä—É–∑–∫–∞ >tibetastromed< {data_url.strftime('%d-%m-%Y')}:  "
              f"{' '.join(tibet_yesterday.split()[:3])}   "
              f"{get_today().strftime('%d-%m-%Y %H:%M:%S')}")
        # logger.debug(f"Loading content for yesterday - {data_url.strftime('%d-%m-%Y')}")
    elif data_url.strftime('%d-%m-%Y') == get_today().strftime('%d-%m-%Y'):
        content_today = content
        tibet_today = tibet
        print(f"–í—ã–≥—Ä—É–∑–∫–∞ >mingli< {data_url.strftime('%d-%m-%Y')}:  "
              f"{content_today.find('h5', class_='CzjanChu').text}   "
              f"{get_today().strftime('%d-%m-%Y %H:%M:%S')}")
        print(f"–í—ã–≥—Ä—É–∑–∫–∞ >tibetastromed< {data_url.strftime('%d-%m-%Y')}:  "
              f"{' '.join(tibet_today.split()[:3])}   "
              f"{get_today().strftime('%d-%m-%Y %H:%M:%S')}")
        # logger.debug(f"Loading content for today - {data_url.strftime('%d-%m-%Y')}")
    elif data_url.strftime('%d-%m-%Y') == get_tomorrow().strftime('%d-%m-%Y'):
        content_tomorrow = content
        tibet_tomorrow = tibet
        print(f"–í—ã–≥—Ä—É–∑–∫–∞ >mingli< {data_url.strftime('%d-%m-%Y')}:  "
              f"{content_tomorrow.find('h5', class_='CzjanChu').text}   "
              f"{get_today().strftime('%d-%m-%Y %H:%M:%S')}")
        print(f"–í—ã–≥—Ä—É–∑–∫–∞ >tibetastromed< {data_url.strftime('%d-%m-%Y')}:  "
              f"{' '.join(tibet_tomorrow.split()[:3])}   "
              f"{get_today().strftime('%d-%m-%Y %H:%M:%S')}")
        # logger.debug(f"Loading content for tomorrow - {data_url.strftime('%d-%m-%Y')}")

    # print(data_url.strftime('%d-%m-%Y'))
    # print(f" get_today - {get_today().strftime('%d-%m-%Y')}")
    # print(f" get_yesterday - {get_yesterday().strftime('%d-%m-%Y')}")
    # print(f" get_tomorrow - {get_tomorrow().strftime('%d-%m-%Y')}")
    # logger.debug('=========================================================================')
    # logger.debug(f"variable  data_url - {data_url.strftime('%d-%m-%Y')}")
    # logger.debug(f"variable  get_today - {get_today().strftime('%d-%m-%Y')}")
    # logger.debug(f"variable  get_yesterday - {get_yesterday().strftime('%d-%m-%Y')}")
    # logger.debug(f"variable  get_tomorrow - {get_tomorrow().strftime('%d-%m-%Y')}")
    # logger.debug('=========================================================================')
    # return moon
def Printersimbols():
    print('=======================================================')

#======== –û–±—Ä–∞–±–æ—Ç–∫–∞ –®–µ–¥—É–ª–µ—Ä–æ–≤ ============

scheduler.add_job(MoonDay, 'cron', hour=0, minute=0, second=20, args=[1])
scheduler.add_job(MoonDay, 'cron', hour=0, minute=0, second=30, args=[2])
scheduler.add_job(MoonDay, 'cron', hour=0, minute=0, second=40, args=[3])
scheduler.add_job(Printersimbols, 'cron', hour=0, minute=0, second=45)

scheduler.add_job(MoonDay, 'cron', hour=9, minute=19, second=20, args=[1])
scheduler.add_job(MoonDay, 'cron', hour=9, minute=19, second=30, args=[2])
scheduler.add_job(MoonDay, 'cron', hour=9, minute=19, second=40, args=[3])
scheduler.add_job(Printersimbols, 'cron', hour=9, minute=19, second=45)

scheduler.start()

# =================== –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ======================
def timedelta(nameid):
    usertime = datetime.datetime.now()
    conn = sqlite3.connect('testdata.sql')
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE pass=?", (nameid,))
    existing_record = cur.fetchone()
    if existing_record:
        utc = existing_record[-2]
        timedelta = usertime + datetime.timedelta(hours=utc)
    cur.close()
    conn.close()
    return timedelta

# ============== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ë–æ—Ç–∞ ========================
@dp.message_handler(commands=['start'])
async def main(message):
    name = message.from_user.first_name
    nameid = message.from_user.id
    conn = sqlite3.connect('testdata.sql')                      # utc INTEGER
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(50), '
                'pass varchar(50), utc integer, alarm varchar(8))')
    cur.execute("SELECT * FROM users WHERE name=? AND pass=?", (name, nameid))
    existing_record = cur.fetchone()
    if existing_record:
        await message.answer( "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è —Å–Ω–æ–≤–∞")
    else:
        cur.execute("INSERT INTO users (name, pass, utc) VALUES (?, ?, ?)", (name, nameid, 1))
        conn.commit()
        #bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")   .from_user.first_name
    cur.close()
    conn.close()
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞', callback_data='Ukr')
    btn2 = types.InlineKeyboardButton('üáµüá± –ü–æ–ª—å—à–∞', callback_data='Pol')
    btn3 = types.InlineKeyboardButton('Ô∏èÔ∏èüá∫üá∏ –°–®–ê', callback_data='Usa')
    markup.row(btn1, btn2, btn3)
    await message.answer(               f'  –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <b>{name}!</b> '
                                        f'\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —ç–∑–æ—Ç–µ—Ä–∏–∫–æ–≤ :)'
                                        f'\n–ù–∞–¥–µ—é—Å—å, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏.'
                                        f' –ï—Å–ª–∏ –Ω–µ—Ç,- —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <b> /help </b>'
                                        f'\n–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'
                                        f' –≤—Ä–µ–º—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ '
                                        f'–Ω—É–∂–Ω—É—é  üìç <b>–õ–æ–∫–∞—Ü–∏—é</b> :'
                                        ,parse_mode='html', reply_markup=markup)

@dp.message_handler(commands=['show_me_the_users'])
async def allusers(message):
    conn = sqlite3.connect('testdata.sql')
    cur = conn.cursor()
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()
    info = ''
    for el in users: info += f'Name: {el[1]}, ID:{el[2]}, utc:{el[3]}\n'
    cur.execute("SELECT COUNT(*) FROM users")
    count = cur.fetchone()[0]
    cur.close()
    conn.close()
    await message.answer(f'{count}\n{info}')
    # await bot.send_message(chat_id=237863350, text=info)
    # await bot.send_message(chat_id=678537666, text='–ü—Ä–∏–≤–µ—Ç –¢–∞—Ç—å—è–Ω–∞. –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?')

@dp.message_handler(commands=['main'])
async def main(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('‚õ©  –¢–∏–±–µ—Ç—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='tibet')
    markup.row(btn1)
    btn2 = types.InlineKeyboardButton('üìÖ  –ö–∏—Ç–∞–π—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='today')
    markup.row(btn2)
    btn3 = types.InlineKeyboardButton('üåì –õ—É–Ω–Ω—ã–π –¥–µ–Ω—å', callback_data='moon')
    btn4 = types.InlineKeyboardButton('Ô∏èÔ∏è‚≠êÔ∏è  –ó–≤—ë–∑–¥—ã', callback_data='stars')
    markup.row(btn3, btn4)
    btn5 = types.InlineKeyboardButton('üß≠ –í—Å–µ —á–∞—Å—ã', callback_data='hours')
    btn6 = types.InlineKeyboardButton('‚ùì –ü–æ–º–æ—â—å', callback_data='help')
    markup.row(btn5, btn6)
    await message.answer(             f'\nüí°  <b>–ú–µ–Ω—é</b>'
                                      f'\n  ------------'
                                      f'\n  –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.'
                                      f'\n- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–∞ —á–∞—Å –ø–æ –∫–∏—Ç–∞–π—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é.'
                                      f'\n- –¢–∏–±–µ—Ç—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (–ø—Ä–∞–∑–¥–Ω–∏–∫–∏, —Å—Ç—Ä–∏–∂–∫–∞, –ø–æ–µ–∑–¥–∫–∏)'
                                      f'\n- –õ—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å'
                                      f'\n- –ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'
                                      f'\n- –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
                                    ,reply_markup=markup, parse_mode='html')

@dp.message_handler(commands=['time'])
async def maintest(message, nameid=None):
    if nameid is None:
        nameid = message.from_user.id

    diff_hours = (get_today() - timedelta(nameid)).total_seconds() / 3600
    diff_hours = round(diff_hours)
    if diff_hours == 0: diff_hours = '–ü–æ–ª—å—à–∞ üáµüá±'
    if diff_hours == -1: diff_hours = '–£–∫—Ä–∞–∏–Ω–∞  üá∫üá¶'
    if diff_hours == 6: diff_hours = '–°–®–ê üá∫üá∏'
    await message.answer(
        f'<b><u>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ :</u></b>'
        f'\n–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ {diff_hours}'
        f'\n–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è :'
        f'\n  <b>{timedelta(nameid).strftime("%d-%m-%Y  %H:%M")}</b>'
        f'\n–í –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è /profile'
        # f'\n{diff_hours}'
        ,parse_mode='html')


@dp.message_handler(commands=['help'])
async def help(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))
    await message.answer(               f'\nüîπ  <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>'
                                        f'\n'
                                        f'\n-–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é <b> /main </b>'
                                        f'\n-–ö–∏—Ç–∞–π—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å <b> /day </b>'
                                        f'\n-–ö–∏—Ç–∞–π—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ß–∞—Å <b> /hour </b>'
                                        f'\n-–¢–∏–±–µ—Ç—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å <b> /tibet </b>'
                                        f'\n-–õ—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å <b> /moon </b>'
                                        f'\n-C–∏–º–≤–æ–ª—ã –¥–Ω—è –ø–æ –∑–≤—ë–∑–¥–∞–º<b> /stars </b>'
                                        f'\n-–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b> /profile </b>'
                                        f'\n-–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ <b> /time </b>'
                                        f'\n'
                                        f'\nüîπ  <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:</b>'
                                        f'\n'
                                        f'\n–†–æ–±–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–∞ —á–∞—Å –ø–æ –∫–∏—Ç–∞–π—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é.'
                                        f' –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ç–∏–±–µ—Ç—Å–∫–∏–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–∂–∫–∏ –∏ –ø–æ–µ–∑–¥–æ–∫.'
                                        f' –ê —Ç–∞–∫ –∂–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –∏ —Å–∏–º–≤–æ–ª –¥–Ω—è.'
                                        f'\n  --------------------------------'
                                        f'\nüìÖ –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–º –¥–∞—Ç—É, –µ—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ'
                                        f' –≤–≤–µ—Å—Ç–∏ –≤ —á–∞—Ç–µ –±–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY (–ù–∞–ø—Ä–∏–º–µ—Ä: 17-03-2023).'
                                        f'\n  --------------------------------'
                                        f'\n‚è± –°–¥–µ–ª–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                                        f'\n'
                                        f'\n–ü–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –ø–∏—Å–∞—Ç—å: @Rts_support'
                          ,reply_markup=markup, parse_mode='html')

@dp.message_handler(commands=['profile'])
async def profile(message):
    name = message.from_user.first_name
    nameid = message.from_user.id
    conn = sqlite3.connect('testdata.sql')                      # utc INTEGER
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(50), '
                'pass varchar(50), utc integer, alarm varchar(8))')
    cur.execute("SELECT * FROM users WHERE name=? AND pass=?", (name, nameid))
    existing_record = cur.fetchone()
    if not existing_record:
        cur.execute("INSERT INTO users (name, pass, utc) VALUES (?, ?, ?)", (name, nameid, 1))
        conn.commit()
        #bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")   .from_user.first_name
    cur.close()
    conn.close()
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞', callback_data='Ukr')
    btn2 = types.InlineKeyboardButton('üáµüá± –ü–æ–ª—å—à–∞', callback_data='Pol')
    btn3 = types.InlineKeyboardButton('Ô∏èÔ∏èüá∫üá∏ –°–®–ê', callback_data='Usa')
    markup.row(btn1, btn2, btn3)
    btn4 = types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back')
    markup.row(btn4)
    await message.answer(               f'\nüë§  <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>'
                                        f'\n-------------------------------'
                                        f'\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥ –∏–º–µ–Ω–µ–º : {name}.'
                                        f' –î–ª—è —Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏,'
                                        f' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–∏ —á–∞—Å—ã'
                                        f'\n –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É üìç <b>–õ–æ–∫–∞—Ü–∏—é</b> –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ : '
                                        # f'\n–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è <b> /location </b>'
                                        f'\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
                          ,reply_markup=markup, parse_mode='html')

@dp.message_handler(commands=['moon'])
async def moonday(message, nameid=None):
    if nameid is None:
        nameid = message.from_user.id
    if timedelta(nameid).strftime('%d-%m-%Y') == get_today().strftime('%d-%m-%Y'): content = content_today
    if timedelta(nameid).strftime('%d-%m-%Y') == get_tomorrow().strftime('%d-%m-%Y'): content = content_tomorrow
    if timedelta(nameid).strftime('%d-%m-%Y') == get_yesterday().strftime('%d-%m-%Y'): content = content_yesterday

    moon = content.find('div', class_='firstInfo').find('div', class_='MoonDay') \
                      .find_all(string=lambda text: isinstance(text, Comment))[1].split('DNone">')[1][:-13]

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))
    await message.answer(               '  üåì   **–õ—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å** '
                                        f'\n  --------------------------------'
                                        f'\n   {moon}'
                          ,reply_markup=markup, parse_mode='Markdown')

@dp.message_handler(commands=['tibet'])
async def tibet(message, nameid=None):
    if nameid is None:
        nameid = message.from_user.id
    if timedelta(nameid).strftime('%d-%m-%Y') == get_today().strftime('%d-%m-%Y'): content = tibet_today
    if timedelta(nameid).strftime('%d-%m-%Y') == get_tomorrow().strftime('%d-%m-%Y'): content = tibet_tomorrow
    if timedelta(nameid).strftime('%d-%m-%Y') == get_yesterday().strftime('%d-%m-%Y'): content = tibet_yesterday

    start = content.find("–ø—Ä–∞–∑–¥–Ω–∏–∫–∏") + len("–ø—Ä–∞–∑–¥–Ω–∏–∫–∏")
    end = content.find("–ì–ª–∞–≤–Ω–∞—è")
    holiday = content[start:end]

    if ".–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è" in content: content = content.replace('.–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è', ' –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è')
    if ".–ü–æ–µ–∑–¥–∫–∞" in content: content = content.replace('.–ü–æ–µ–∑–¥–∫–∞', ' –ü–æ–µ–∑–¥–∫–∞')
    if ".–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:" in content: content = content.replace('.–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:', ' –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:')

    start = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")  # -- –°—Ç—Ä–∏–∂–∫–∞ --
    end = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
    item1 = content[start:end]

    start1 = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
    end1 = content.find(".–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ")
    item2 = content[start1:end1]
    item2 = item2.replace('.–ü–æ–µ–∑–¥–∫–∞', ' –ü–æ–µ–∑–¥–∫–∞')

    start2 = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")  # -- –ú—ã—Ç—å—ë --
    end2 = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
    item3 = content[start2:end2]

    start3 = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
    end3 = content.find(".–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ")
    item4 = content[start3:end3]
    item4 = item4.replace('.–ü–æ–µ–∑–¥–∫–∞', ' –ü–æ–µ–∑–¥–∫–∞')

    start4 = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:")  # -- –ü–æ–µ–∑–¥–∫–∞ --
    end4 = content.find(".–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ")
    item5 = content[start4:end4]

    start5 = content.find("–ü–æ–µ–∑–¥–∫–∞")
    end5 = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
    item6 = content[start5:end5]

    start6 = content.find("–ü–æ–µ–∑–¥–∫–∞")
    end6 = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
    item7 = content[start6:end6]

    start7 = content.find("–ü–æ–µ–∑–¥–∫–∞")
    end7 = content.find(".–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ")
    item8 = content[start7:end7]

    start8 = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:")
    end8 = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
    item9 = content[start8:end8]

    start9 = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:")
    end9 = content.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
    item10 = content[start9:end9]

    result1 = ''
    result2 = ''
    result3 = ''
    # ===============  –ó–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏ ======================
    if "—Å—Ç—Ä–∏–∂–∫–∏" in item1 and "–ü–æ–µ–∑–¥–∫–∞" not in item1 and "–ø–æ–µ–∑–¥–∫–∏:" not in item1:
        idx_sub_start = item1.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
        idx_sub_end = item1.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
        result1 = item1[idx_sub_start:idx_sub_end]
        # print(item1[idx_sub_start:idx_sub_end])
        # print('1 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')
    elif "–ü–æ–µ–∑–¥–∫–∞" not in item2 and "–ø–æ–µ–∑–¥–∫–∏:" not in item2:
        result1 = item2
        # print(item2)
        # print('2 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')
    elif "–ü–æ–µ–∑–¥–∫–∞" in item2:
        idx_sub_start = item2.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
        idx_sub_end = item2.find("–ü–æ–µ–∑–¥–∫–∞")
        result1 = item2[idx_sub_start:idx_sub_end]
        # print(item2[idx_sub_start:idx_sub_end])
        # print('3 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')
    elif "–ø–æ–µ–∑–¥–∫–∏:" in item2:
        idx_sub_start = item2.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
        idx_sub_end = item2.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:")
        result1 = item2[idx_sub_start:idx_sub_end]
        # print(item2[idx_sub_start:idx_sub_end])
        # print('4 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')

    # ===============  –ó–∞–ø—Ä–æ—Å –¥–ª—è –º—ã—Ç—å—è ======================
    if "–º—ã—Ç—å—è" in item3:
        idx_sub_start = item3.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
        idx_sub_end = item3.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
        result2 = item3[idx_sub_start:idx_sub_end]
        # print(item3[idx_sub_start:idx_sub_end])
        # print('1 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')
    elif "–ü–æ–µ–∑–¥–∫–∞" not in item4 and "–ø–æ–µ–∑–¥–∫–∏:" not in item4:
        result2 = item4
        # print(item4)
        # print('2 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')
    elif "–ü–æ–µ–∑–¥–∫–∞" in item4:
        idx_sub_start = item4.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
        idx_sub_end = item4.find("–ü–æ–µ–∑–¥–∫–∞")
        result2 = item4[idx_sub_start:idx_sub_end]
        # print(item4[idx_sub_start:idx_sub_end])
        # print('3 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')
    elif "–ø–æ–µ–∑–¥–∫–∏:" in item4:
        idx_sub_start = item4.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
        idx_sub_end = item4.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:")
        result2 = item4[idx_sub_start:idx_sub_end]
        # print(item4[idx_sub_start:idx_sub_end])
        # print('4 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')

    # ===============  –ü–æ–µ–∑–¥–∫–∞ ======================
    if "–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:" in item5 and "–º—ã—Ç—å—è" not in item5 and "—Å—Ç—Ä–∏–∂–∫–∏" not in item5:
        result3 = item5
        # print(item5)
        # print('1 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')
    elif "–ü–æ–µ–∑–¥–∫–∞" in item6 and "–º—ã—Ç—å—è" not in item6 and "—Å—Ç—Ä–∏–∂–∫–∏" not in item6:
        result3 = item6
        # print(item6)
        # print('2 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')
    elif "–ü–æ–µ–∑–¥–∫–∞" in item7 and "–º—ã—Ç—å—è" not in item7 and "—Å—Ç—Ä–∏–∂–∫–∏" not in item7:
        result3 = item7
        # print(item7)
        # print('3 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')
    elif "–ü–æ–µ–∑–¥–∫–∞" in item8 and "–º—ã—Ç—å—è" not in item8 and "—Å—Ç—Ä–∏–∂–∫–∏" not in item8:
        result3 = item8
        # print(item8)
        # print('4 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')
    elif "–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:" in item9 and "–º—ã—Ç—å—è" not in item9 and "—Å—Ç—Ä–∏–∂–∫–∏" not in item9:
        result3 = item9
        # print(item9)
        # print('5 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')
    elif "–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:" in item10 and "–º—ã—Ç—å—è" not in item10 and "—Å—Ç—Ä–∏–∂–∫–∏" not in item10:
        result3 = item10
        # print(item10)
        # print('6 –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è')

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))
    await message.answer(               f'\n  ‚õ©  <b> –¢–∏–±–µ—Ç—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã </b>'
                                        f'\n  --------------------------------'
                                        f'\n  üôè  {holiday}'
                                        f'\n  --------------------------------'
                                        f'\n  ‚úÇÔ∏è  {result1}'
                                        f'\n  --------------------------------'
                                        f'\n  üöø  {result2}'
                                        f'\n  --------------------------------'
                                        f'\n  üõ∫  {result3}'
                          ,reply_markup=markup, parse_mode='html')

@dp.message_handler(commands=['day'])
async def day(message, nameid=None):
    if nameid is None:
        nameid = message.from_user.id
    if timedelta(nameid).strftime('%d-%m-%Y') == get_today().strftime('%d-%m-%Y'): content = content_today
    if timedelta(nameid).strftime('%d-%m-%Y') == get_tomorrow().strftime('%d-%m-%Y'): content = content_tomorrow
    if timedelta(nameid).strftime('%d-%m-%Y') == get_yesterday().strftime('%d-%m-%Y'): content = content_yesterday

    try:
        DSymbol = content.find('h5', class_='CzjanChu').text
    except:
        DSymbol = ''
    try:
        DSymbolo = content.find('p', class_='CzjanChu').text
    except:
        DSymbolo = ''
    try:
        DayPlus = content.find('p', class_='PlusMinus').text
    except:
        DayPlus = ''
    try:
        DayMinus = content.findAll('p', class_='PlusMinus')[1].text
    except:
        DayMinus = ''
    try:
        DMoon = content.find('div', class_='MoonDay').text
    except:
        DMoon = ''

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back')
    btn2 = types.InlineKeyboardButton('üîé  –ß–∞—Å –Ω–∞ —Å–µ–π—á–∞—Å', callback_data='hour')
    markup.row(btn1, btn2)
    await message.answer(               f'\n üìÖ  <b>–°–µ–≥–æ–¥–Ω—è :   {timedelta(nameid).strftime("%d-%m-%Y")}</b>'
                                        f'\n-------------------------------'
                                        f'\n  - <b><u> {DSymbol}</u></b>'
                                        f'\n   -  {DSymbolo}'
                                        f'\n -------------------------------------'
                                        f'\n  ‚úÖ -  {DayPlus}'
                                        f'\n  ‚õîÔ∏è -  {DayMinus}'
                                        f'\n -------------------------------------'
                                        f'\n{str(DMoon).strip()}'
                                    ,reply_markup=markup, parse_mode='html')

@dp.message_handler(commands=['stars'])
async def stars(message, nameid=None):
    if nameid is None:
        nameid = message.from_user.id
    if timedelta(nameid).strftime('%d-%m-%Y') == get_today().strftime('%d-%m-%Y'): content = content_today
    if timedelta(nameid).strftime('%d-%m-%Y') == get_tomorrow().strftime('%d-%m-%Y'): content = content_tomorrow
    if timedelta(nameid).strftime('%d-%m-%Y') == get_yesterday().strftime('%d-%m-%Y'): content = content_yesterday
    content = content.find('div', class_='firstInfo')
    try:  # –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü–∞ (–ù–∞–¥–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å")
        collision1 = content.find('h5', class_='red Collision').text  # .split()[-1]
    except:
        collision1 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—è.
        collision1o = content.findAll('p')[4].text
    except:
        collision1o = ''
    try:  # –í—Ç–æ—Ä–æ–π –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–≤—ã–π –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü–∞ (–ù–∞–¥–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å")
        collision2 = content.findAll('h5', class_='red Collision')[1].text  # .split()[-1]
    except:
        collision2 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—è.
        collision2o = content.findAll('p')[5].text
    except:
        collision2o = ''
    try:  # –ö—Ä–∞—Å–Ω–æ–µ –®–ê –≥–æ–¥–∞
        sha1 = content.find('h5', class_='red Sha').text
    except:
        sha1 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –®–ê
        sha1o = content.find('p', class_='Sha').text
    except:
        sha1o = ''
    try:  # –ö—Ä–∞—Å–Ω–æ–µ –≤—Ç–æ—Ä–æ–µ –®–ê –≥–æ–¥–∞
        sha2 = content.findAll('h5', class_='red Sha')[1].text
    except:
        sha2 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –®–ê
        sha2o = content.findAll('p', class_='Sha')[1].text
    except:
        sha2o = ''
    try:  # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –ó–≤–µ–∑–¥—ã
        positive1 = content.find('h5', class_='positive SymbolStars').text  # –æ—Å—Ç–∞–≤–∏—Ç—å
    except:
        positive1 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        positive1o = content.find('p', class_='SymbolStars').text
    except:
        positive1o = ''
    try:  # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –ó–≤–µ–∑–¥—ã
        positive2 = content.findAll('h5', class_='positive SymbolStars')[1].text
    except:
        positive2 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        positive2o = content.findAll('p', class_='SymbolStars')[2].text
    except:
        positive2o = ''
    try:  # –°–∏–º–≤–æ–ª MKD
        symbolMKD = content.find('div', class_='SymbolStars MKD').text
    except:
        symbolMKD = ''
    try:  # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –ó–≤–µ–∑–¥—ã
        negative = content.find('h5', class_='negative SymbolStars').text
    except:
        negative = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        negativeo = content.findAll('p', class_='SymbolStars')[1].text
    except:
        negativeo = ''

    stars = collision1.strip()+collision1o+collision2.strip()+collision2o+sha1+sha1o.strip()+sha2+sha2o.strip()\
            +positive1+positive1o+positive2+positive2o+symbolMKD+negative+negativeo

    if collision1: collision1 = '\n ‚õîÔ∏è - ' + collision1.strip()
    if collision1o: collision1o = '\n' + collision1o
    if collision2: collision2 = '\n ‚õîÔ∏è - ' + collision2.strip()
    if collision2o: collision2o = '\n' + collision2o
    if sha1: sha1 = '\n ‚õîÔ∏è - ' + sha1.strip()
    if sha1o: sha1o = '\n' + sha1o.strip()
    if sha2: sha2 = '\n ‚õîÔ∏è - ' + sha2
    if sha2o: sha2o = '\n' + sha2o.strip()
    if positive1: positive1 = '\n ‚úÖ - ' + positive1
    if positive1o: positive1o = '\n' + positive1o
    if positive2: positive2 = '\n ‚úÖ - ' + positive2
    if positive2o: positive2o = '\n' + positive2o
    if symbolMKD: symbolMKD = '\n üÄÑÔ∏è - ' + symbolMKD
    if negative: negative = '\n ‚õîÔ∏è - ' + negative
    if negativeo: negativeo = '\n' + negativeo

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))

    if not stars:
        await message.answer(f'\n ‚≠êÔ∏è<b><u> C–∏–º–≤–æ–ª—ã –¥–Ω—è –∏ –ª–µ—Ç—è—â–∏–µ –∑–≤—ë–∑–¥—ã </u></b>'
                                         f'\n---------------------------------------'
                                         f'\n –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
                                    ,reply_markup=markup, parse_mode='html')
    else:
        await message.answer(
                         f'\n ‚≠êÔ∏è<b> C–∏–º–≤–æ–ª—ã –¥–Ω—è –∏ –ª–µ—Ç—è—â–∏–µ –∑–≤—ë–∑–¥—ã </b>'
                         f'\n---------------------------------------'
                         f' {f"<b>{collision1}</b>" if collision1 else ""}'
                         f' {f"{collision1o}" if collision1 else ""}'
                         f' {f"<b>{collision2}</b>" if collision2 else ""}'
                         f' {f"{collision2o}" if collision2o and collision2 and collision2o != sha1o else ""}'
                         f' {f"<b>{sha1}</b>" if sha1 else ""}'
                         f' {f"{sha1o}" if sha1o and not sha2 else ""}'
                         f' {f"<b>{sha2}</b>" if sha2 else ""}'
                         f' {f"{sha2o}" if not sha1o and sha2o else ""}'
                         f' {f"{sha2o}" if sha2o and sha2 and sha2o == sha1o else ""}'
                         f' {f"<b>{positive1}</b>" if positive1 else ""}'
                         f' {f"{positive1o}" if positive1o and positive1 and positive1o[:-1] != negativeo else ""}'
                         f' {f"<b>{positive2}</b>" if positive2 else ""}'
                         f' {f"{positive2o}" if positive2o else ""}'
                         f' {f"<b>{symbolMKD}</b>" if symbolMKD else ""}'
                         f' {f"<b>{negative}</b>" if negative else ""}'
                         f' {f"{negativeo}" if negativeo else ""}'
                         f' {f"{collision1o}" if not negativeo and negative else ""}'
            ,reply_markup=markup, parse_mode='html')

@dp.message_handler(commands=['hour'])
async def daytimes(message, nameid=None):
    if nameid is None:
        nameid = message.from_user.id
    if timedelta(nameid).strftime('%d-%m-%Y') == get_today().strftime('%d-%m-%Y'): content = content_today
    if timedelta(nameid).strftime('%d-%m-%Y') == get_tomorrow().strftime('%d-%m-%Y'): content = content_tomorrow
    if timedelta(nameid).strftime('%d-%m-%Y') == get_yesterday().strftime('%d-%m-%Y'): content = content_yesterday

    DayHour = ''
    Animals = ''
    try:
        if timedelta(nameid).time() >= datetime.time(23, 1) \
                and timedelta(nameid).time() <= datetime.time(23, 59):
            DayHour = content.findAll('td')[-1]
            Animals = '–ß–∞—Å –ö—Ä—ã—Å—ã üêÅ —Å 23:00 –¥–æ 01:00'
        elif timedelta(nameid).time() >= datetime.time(21, 1) \
                and timedelta(nameid).time() <= datetime.time(23, 00):
            DayHour = content.findAll('td')[-2]
            Animals = '–ß–∞—Å –°–≤–∏–Ω—å–∏ üêñ —Å 21:00 –¥–æ 23:00'
        elif timedelta(nameid).time() >= datetime.time(19, 1) \
                and timedelta(nameid).time() <= datetime.time(21, 00):
            DayHour = content.findAll('td')[-3]
            Animals = '–ß–∞—Å –°–æ–±–∞–∫–∏ üêï —Å 19:00 –¥–æ 21:00'
        elif timedelta(nameid).time() >= datetime.time(17, 1) \
                and timedelta(nameid).time() <= datetime.time(19, 00):
            DayHour = content.findAll('td')[-4]
            Animals = '–ß–∞—Å –ü–µ—Ç—É—Ö–∞ üêì —Å 17:00 –¥–æ 19:00'
        elif timedelta(nameid).time() >= datetime.time(15, 1) \
                and timedelta(nameid).time() <= datetime.time(17, 00):
            DayHour = content.findAll('td')[-5]
            Animals = '–ß–∞—Å –û–±–µ–∑—å—è–Ω—ã üêí —Å 15:00 –¥–æ 17:00'
        elif timedelta(nameid).time() >= datetime.time(13, 1) \
                and timedelta(nameid).time() <= datetime.time(15, 00):
            DayHour = content.findAll('td')[-6]
            Animals = '–ß–∞—Å –ö–æ–∑—ã üêê —Å 13:00 –¥–æ 15:00'
        elif timedelta(nameid).time() >= datetime.time(11, 1) \
                and timedelta(nameid).time() <= datetime.time(13, 00):
            DayHour = content.findAll('td')[-7]
            Animals = '–ß–∞—Å –õ–æ—à–∞–¥–∏ üêé —Å 11:00 –¥–æ 13:00'
        elif timedelta(nameid).time() >= datetime.time(9, 1) \
                and timedelta(nameid).time() <= datetime.time(11, 00):
            DayHour = content.findAll('td')[-8]
            Animals = '–ß–∞—Å –ó–º–µ–∏ üêç —Å 09:00 –¥–æ 11:00'
        elif timedelta(nameid).time() >= datetime.time(7, 1) \
                and timedelta(nameid).time() <= datetime.time(9, 00):
            DayHour = content.findAll('td')[-9]
            Animals = '–ß–∞—Å –î—Ä–∞–∫–æ–Ω–∞ üêâ —Å 07:00 –¥–æ 09:00'
        elif timedelta(nameid).time() >= datetime.time(5, 1) \
                and timedelta(nameid).time() <= datetime.time(7, 00):
            DayHour = content.findAll('td')[-10]
            Animals = '–ß–∞—Å –ö—Ä–æ–ª–∏–∫–∞ üêá —Å 05:00 –¥–æ 07:00'
        elif timedelta(nameid).time() >= datetime.time(3, 1) \
                and timedelta(nameid).time() <= datetime.time(5, 00):
            DayHour = content.findAll('td')[-11]
            Animals = '–ß–∞—Å –¢–∏–≥—Ä–∞ üêÖ —Å 03:00 –¥–æ 05:00'
        elif timedelta(nameid).time() >= datetime.time(1, 1) \
                and timedelta(nameid).time() <= datetime.time(3, 00):
            DayHour = content.findAll('td')[-12]
            Animals = '–ß–∞—Å –ë—ã–∫–∞ üêÇ —Å 01:00 –¥–æ 03:00'
        elif timedelta(nameid).time() >= datetime.time(0, 00) \
                and timedelta(nameid).time() <= datetime.time(1, 00):
            DayHour = content.findAll('td')[-13]
            Animals = '–ß–∞—Å –ö—Ä—ã—Å—ã üêÅ —Å 23:00 –¥–æ 01:00'
    except:
        DayHour = ''

    try: # –ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        plus_minus = DayHour.findAll('p', class_='PlusMinus')
    except:
        plus_minus = ''
    try:  # –ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        plus_minuso = DayHour.find('p', class_='PlusMinus').text
    except:
        plus_minuso = ''

    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Å–∞
        Positive = plus_minus[0].find('span', class_='IconPositive')
    except:
        Positive = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Å–∞
        Negative = plus_minus[0].find('span', class_='IconNegative')
    except:
        Negative = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —á–∞—Å
        Negative2 = plus_minus[1].find('span', class_='IconNegative')
    except:
        Negative2 = ''
    try:
        Collision = DayHour.find('p', class_='Collision').text
    except:
        Collision = ''
    try:
        SymbolStars = DayHour.findAll('p', class_='SymbolStars')[0].text
    except:
        SymbolStars = ''
    try:
        SymbolStars1 = DayHour.findAll('p', class_='SymbolStars')[1].text
    except:
        SymbolStars1 = ''
    try:
        SymbolStars2 = DayHour.findAll('p', class_='SymbolStars')[2].text
    except:
        SymbolStars2 = ''
    try:
        SymbolStars3 = DayHour.findAll('p', class_='SymbolStars')[3].text
    except:
        SymbolStars3 = ''

    if Positive: Positive = '\n ‚úÖ  ' + plus_minuso.strip()
    if Negative: Negative = '\n ‚õîÔ∏è  ' + plus_minuso.strip()
    if Negative2: Negative2 = '\n ‚õîÔ∏è  ' + plus_minus[1].text.strip()
    if Collision: Collision = '\n ‚ûñ  ' + Collision.strip()
    if SymbolStars: SymbolStars = '\n üõü ' + SymbolStars
    if SymbolStars1: SymbolStars1 = '\n üîÆ ' + SymbolStars1
    if SymbolStars2: SymbolStars2 = '\n üßø ' + SymbolStars2
    if SymbolStars3: SymbolStars3 = '\n üîë ' + SymbolStars3

    Negative1 = str(Negative).strip()
    Positive1 = str(Positive).strip()

    ours = Negative1+Positive1

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))

    if not ours:
        await message.answer(
                         f'\n üïí<b>  –°–µ–π—á–∞—Å {timedelta(nameid).strftime("%H:%M")} -- {Animals}</b>'
                         f'\n'
                         f'\n –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.'
                         f'\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å.'
            ,reply_markup=markup, parse_mode='html')
    else:
        await message.answer(
                         f'\n üïí<b>  –°–µ–π—á–∞—Å {timedelta(nameid).strftime("%H:%M")} '
                         f'\n{Animals}</b>'
                         f'\n--------------------------------------'
                         f' {f"{Positive}" if Positive else ""}'
                         f' {f"{Negative}" if Negative else ""}'
                         f' {f"{Negative2}" if Negative2 else ""}'
                         f'\n<b>----------+++----------</b>'
                         f' {f"{Collision}" if Collision else ""}'
                         f' {f"{SymbolStars}" if SymbolStars else ""}'
                         f' {f"{SymbolStars1}" if SymbolStars1 else ""}'
                         f' {f"{SymbolStars2}" if SymbolStars2 else ""}'
                         f' {f"{SymbolStars3}" if SymbolStars3 else ""}'
                         ,reply_markup=markup, parse_mode='html')

@dp.message_handler(commands=['hours'])
async def allhours(message, nameid=None):
    if nameid is None:
        nameid = message.from_user.id
    if timedelta(nameid).strftime('%d-%m-%Y') == get_today().strftime('%d-%m-%Y'): content = content_today
    if timedelta(nameid).strftime('%d-%m-%Y') == get_tomorrow().strftime('%d-%m-%Y'): content = content_tomorrow
    if timedelta(nameid).strftime('%d-%m-%Y') == get_yesterday().strftime('%d-%m-%Y'): content = content_yesterday

    items = []
    for p in range(-13, 0):
        try:
            item1 = content.findAll('div', class_='HourTime')[p].text  # –≠—Ç–æ –¥–ª—è —á–∞—Å
        except:
            item1 = ''
        # ============================= –¢—É—Ç –æ–ø–∏—Å–∞–Ω–∏–µ =======================================
        DayHour = content.findAll('td')[p]
        try:  # –ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            plus_minus = DayHour.findAll('p', class_='PlusMinus')
        except:
            plus_minus = ''
        try:  # –ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            plus_minuso = DayHour.find('p', class_='PlusMinus').text
        except:
            plus_minuso = ''

        try:  # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Å–∞
            Positive = plus_minus[0].find('span', class_='IconPositive')
        except:
            Positive = ''
        try:  # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Å–∞
            Negative = plus_minus[0].find('span', class_='IconNegative')
        except:
            Negative = ''
        try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —á–∞—Å
            Negative2 = plus_minus[1].find('span', class_='IconNegative')
        except:
            Negative2 = ''

        if Positive: Positive = '\n ‚úÖ  ' + plus_minuso.strip()
        if Negative: Negative = '\n ‚õîÔ∏è  ' + plus_minuso.strip()
        if Negative2: Negative2 = '\n ‚õîÔ∏è  ' + plus_minus[1].text.strip()

        # items.append(f'{item1}\n{f"{Positive}" if Positive else ""}\n{f"{Negative}" if Negative else ""}\n{f"{Negative2}" if Negative2 else ""}')
        items.append(f'{item1}\n{Positive}\n{Negative}\n{Negative2}')

    result = [x.strip().replace('\xa0', ' ') for x in items]
    result = [x.strip().replace('None', '') for x in result]
    result = [x.strip().replace('\n', '') for x in result]
    result = '\n'.join(result)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))
    await message.answer(               '  üß≠   **–í—Å–µ –¥–≤—É—Ö—á–∞—Å–æ–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è** '
                                        f'\n  --------------------------------'
                                        f'\n{result}'
                          ,reply_markup=markup, parse_mode='Markdown')




# ========================================================================================================
#                       –û–±—Ä–∞–±–æ—Ç–∫–∞  –ó–∞–ø—Ä–æ—Å–æ–≤  Callback
# ========================================================================================================
@dp.callback_query_handler()
async def callback(call):
    global content_today, content_yesterday, content_tomorrow

    if call.data == 'Ukr':
        nameid = call.from_user.id
        usertime = call.message.date
        conn = sqlite3.connect('testdata.sql')
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE pass=?", (nameid,))
        existing_record = cur.fetchone()
        if existing_record:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cur.execute("UPDATE users SET utc = ? WHERE pass = ?", (1, nameid))
            conn.commit()
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cur.execute("SELECT utc FROM users WHERE pass=?", (nameid,))
            existing_record = cur.fetchone()
        utc = existing_record[-1]
        timedelta = usertime + datetime.timedelta(hours=utc)
        cur.close()
        conn.close()
        await bot.send_message(call.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –£–∫—Ä–∞–∏–Ω–∞ üá∫üá¶ UTC+2\n{timedelta}')

    elif call.data == 'Pol':
        nameid = call.from_user.id
        usertime = call.message.date
        conn = sqlite3.connect('testdata.sql')
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE pass=?", (nameid,))
        existing_record = cur.fetchone()
        if existing_record:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cur.execute("UPDATE users SET utc = ? WHERE pass = ?", (0, nameid))
            conn.commit()
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cur.execute("SELECT utc FROM users WHERE pass=?", (nameid,))
            existing_record = cur.fetchone()
        utc = existing_record[-1]
        timedelta = usertime + datetime.timedelta(hours=utc)
        cur.close()
        conn.close()
        await bot.send_message(call.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü–æ–ª—å—à–∞ üáµüá± UTC+1\n{timedelta}')

    elif call.data == 'Usa':
        nameid = call.from_user.id
        usertime = call.message.date
        conn = sqlite3.connect('testdata.sql')
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE pass=?", (nameid,))
        existing_record = cur.fetchone()
        if existing_record:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cur.execute("UPDATE users SET utc = ? WHERE pass = ?", (-6, nameid))
            conn.commit()
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cur.execute("SELECT utc FROM users WHERE pass=?", (nameid,))
            existing_record = cur.fetchone()
        utc = existing_record[-1]
        timedelta = usertime + datetime.timedelta(hours=utc)
        cur.close()
        conn.close()
        await bot.send_message(call.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –°–®–ê üá∫üá∏ UTC-4\n{timedelta}')

    elif call.data == 'back':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('‚õ©  –¢–∏–±–µ—Ç—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='tibet')
        markup.row(btn1)
        btn2 = types.InlineKeyboardButton('üìÖ  –ö–∏—Ç–∞–π—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='today')
        markup.row(btn2)
        btn3 = types.InlineKeyboardButton('üåì –õ—É–Ω–Ω—ã–π –¥–µ–Ω—å', callback_data='moon')
        btn4 = types.InlineKeyboardButton('Ô∏èÔ∏è‚≠êÔ∏è  –ó–≤—ë–∑–¥—ã', callback_data='stars')
        markup.row(btn3, btn4)
        btn5 = types.InlineKeyboardButton('üß≠ –í—Å–µ —á–∞—Å—ã', callback_data='hours')
        btn6 = types.InlineKeyboardButton('‚ùì –ü–æ–º–æ—â—å', callback_data='help')
        markup.row(btn5, btn6)
        await bot.edit_message_text(text=   f'\nüí°  <b>–ú–µ–Ω—é</b>'
                                            f'\n  ------------'
                                            f'\n  –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.'
                                            f'\n- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–∞ —á–∞—Å –ø–æ –∫–∏—Ç–∞–π—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é.'
                                            f'\n- –¢–∏–±–µ—Ç—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (–ø—Ä–∞–∑–¥–Ω–∏–∫–∏, —Å—Ç—Ä–∏–∂–∫–∞, –ø–æ–µ–∑–¥–∫–∏)'
                                            f'\n- –õ—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å'
                                            f'\n- –ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'
                                            f'\n- –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
            ,chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='html', reply_markup=markup)

    elif call.data == 'help':
        await help(call.message)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == 'today':
        nameid = call.from_user.id
        message = types.Message(chat=types.Chat(id=call.message.chat.id), message_id=call.message.message_id)
        await day(message, nameid)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == 'tibet':
        nameid = call.from_user.id
        message = types.Message(chat=types.Chat(id=call.message.chat.id), message_id=call.message.message_id)
        await tibet(message, nameid)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == 'moon':
        nameid = call.from_user.id
        message = types.Message(chat=types.Chat(id=call.message.chat.id), message_id=call.message.message_id)
        await moonday(message, nameid)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == 'stars':
        nameid = call.from_user.id
        message = types.Message(chat=types.Chat(id=call.message.chat.id), message_id=call.message.message_id)
        await stars(message, nameid)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == 'hour':
        nameid = call.from_user.id
        message = types.Message(chat=types.Chat(id=call.message.chat.id), message_id=call.message.message_id)
        await daytimes(message, nameid)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == 'hours':
        nameid = call.from_user.id
        message = types.Message(chat=types.Chat(id=call.message.chat.id), message_id=call.message.message_id)
        await allhours(message, nameid)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

# ========================================================================================================
#                       –¢—É—Ç  Callback  –ó–∞–∫–æ–Ω—á–∏–ª—Å—è  :))
# ========================================================================================================

#============================ –í—ã–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–∞—Ç—É =========================
@dp.message_handler(content_types=['text'])
async def fordate(message):
    waitfor = await bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ ... ‚åõÔ∏è')
    date_str = message.text.strip().lower()
    try:
        date_obj = datetime.datetime.strptime(date_str, '%d-%m-%Y')
    except ValueError:
        await bot.edit_message_text(text=f'–î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–æ',chat_id=waitfor.chat.id, message_id=waitfor.message_id)
        return
    content = StarsDay(date_str)  # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –¥–∞—Ç–µ
    content_tibet = TibetHolly(date_str)  # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –¥–∞—Ç–µ

    # moon = content.find('div', class_='firstInfo').find('div', class_='MoonDay') \
    #            .find_all(string=lambda text: isinstance(text, Comment))[1].split('DNone">')[1][:-13]
    try:
        DSymbol = content.find('h5', class_='CzjanChu').text
    except:
        DSymbol = ''
    try:
        DSymbolo = content.find('p', class_='CzjanChu').text
    except:
        DSymbolo = ''
    try:
        DayPlus = content.find('p', class_='PlusMinus').text
    except:
        DayPlus = ''
    try:
        DayMinus = content.findAll('p', class_='PlusMinus')[1].text
    except:
        DayMinus = ''
    try:
        DMoon = content.find('div', class_='MoonDay').text
    except:
        DMoon = ''

    # ================================== –ó–≤—ë–∑–¥—ã ===========================================

    content = content.find('div', class_='firstInfo')
    try:  # –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü–∞ (–ù–∞–¥–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å")
        collision1 = content.find('h5', class_='red Collision').text  # .split()[-1]
    except:
        collision1 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—è.
        collision1o = content.findAll('p')[4].text
    except:
        collision1o = ''
    try:  # –í—Ç–æ—Ä–æ–π –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–≤—ã–π –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü–∞ (–ù–∞–¥–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å")
        collision2 = content.findAll('h5', class_='red Collision')[1].text  # .split()[-1]
    except:
        collision2 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—è.
        collision2o = content.findAll('p')[5].text
    except:
        collision2o = ''
    try:  # –ö—Ä–∞—Å–Ω–æ–µ –®–ê –≥–æ–¥–∞
        sha1 = content.find('h5', class_='red Sha').text
    except:
        sha1 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –®–ê
        sha1o = content.find('p', class_='Sha').text
    except:
        sha1o = ''
    try:  # –ö—Ä–∞—Å–Ω–æ–µ –≤—Ç–æ—Ä–æ–µ –®–ê –≥–æ–¥–∞
        sha2 = content.findAll('h5', class_='red Sha')[1].text
    except:
        sha2 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –®–ê
        sha2o = content.findAll('p', class_='Sha')[1].text
    except:
        sha2o = ''
    try:  # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –ó–≤–µ–∑–¥—ã
        positive1 = content.find('h5', class_='positive SymbolStars').text  # –æ—Å—Ç–∞–≤–∏—Ç—å
    except:
        positive1 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        positive1o = content.find('p', class_='SymbolStars').text
    except:
        positive1o = ''
    try:  # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –ó–≤–µ–∑–¥—ã
        positive2 = content.findAll('h5', class_='positive SymbolStars')[1].text
    except:
        positive2 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        positive2o = content.findAll('p', class_='SymbolStars')[2].text
    except:
        positive2o = ''
    try:  # –°–∏–º–≤–æ–ª MKD
        symbolMKD = content.find('div', class_='SymbolStars MKD').text
    except:
        symbolMKD = ''
    try:  # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –ó–≤–µ–∑–¥—ã
        negative = content.find('h5', class_='negative SymbolStars').text
    except:
        negative = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        negativeo = content.findAll('p', class_='SymbolStars')[1].text
    except:
        negativeo = ''

    stars = collision1.strip() + collision1o + collision2.strip() + collision2o + sha1 + sha1o.strip() + sha2 + sha2o.strip() \
            + positive1 + positive1o + positive2 + positive2o + symbolMKD + negative + negativeo

    if collision1: collision1 = '\n ‚õîÔ∏è - ' + collision1.strip()
    if collision1o: collision1o = '\n' + collision1o
    if collision2: collision2 = '\n ‚õîÔ∏è - ' + collision2.strip()
    if collision2o: collision2o = '\n' + collision2o
    if sha1: sha1 = '\n ‚õîÔ∏è - ' + sha1.strip()
    if sha1o: sha1o = '\n' + sha1o.strip()
    if sha2: sha2 = '\n ‚õîÔ∏è - ' + sha2
    if sha2o: sha2o = '\n' + sha2o.strip()
    if positive1: positive1 = '\n ‚úÖ - ' + positive1
    if positive1o: positive1o = '\n' + positive1o
    if positive2: positive2 = '\n ‚úÖ - ' + positive2
    if positive2o: positive2o = '\n' + positive2o
    if symbolMKD: symbolMKD = '\n üÄÑÔ∏è - ' + symbolMKD
    if negative: negative = '\n ‚õîÔ∏è - ' + negative
    if negativeo: negativeo = '\n' + negativeo

    # ================================== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¢–∏–±–µ—Ç—É ===========================================

    start = content_tibet.find("–ø—Ä–∞–∑–¥–Ω–∏–∫–∏") + len("–ø—Ä–∞–∑–¥–Ω–∏–∫–∏")
    end = content_tibet.find("–ì–ª–∞–≤–Ω–∞—è")
    holiday = content_tibet[start:end]

    if ".–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è" in content_tibet: content_tibet = content_tibet.replace('.–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è', ' –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è')
    if ".–ü–æ–µ–∑–¥–∫–∞" in content_tibet: content_tibet = content_tibet.replace('.–ü–æ–µ–∑–¥–∫–∞', ' –ü–æ–µ–∑–¥–∫–∞')
    if ".–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:" in content_tibet: content_tibet = content_tibet.replace('.–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:', ' –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:')

    start = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")  # -- –°—Ç—Ä–∏–∂–∫–∞ --
    end = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
    item1 = content_tibet[start:end]

    start1 = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
    end1 = content_tibet.find(".–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ")
    item2 = content_tibet[start1:end1]
    item2 = item2.replace('.–ü–æ–µ–∑–¥–∫–∞', ' –ü–æ–µ–∑–¥–∫–∞')

    start2 = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")  # -- –ú—ã—Ç—å—ë --
    end2 = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
    item3 = content_tibet[start2:end2]

    start3 = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
    end3 = content_tibet.find(".–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ")
    item4 = content_tibet[start3:end3]
    item4 = item4.replace('.–ü–æ–µ–∑–¥–∫–∞', ' –ü–æ–µ–∑–¥–∫–∞')

    start4 = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:")  # -- –ü–æ–µ–∑–¥–∫–∞ --
    end4 = content_tibet.find(".–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ")
    item5 = content_tibet[start4:end4]

    start5 = content_tibet.find("–ü–æ–µ–∑–¥–∫–∞")
    end5 = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
    item6 = content_tibet[start5:end5]

    start6 = content_tibet.find("–ü–æ–µ–∑–¥–∫–∞")
    end6 = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
    item7 = content_tibet[start6:end6]

    start7 = content_tibet.find("–ü–æ–µ–∑–¥–∫–∞")
    end7 = content_tibet.find(".–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ")
    item8 = content_tibet[start7:end7]

    start8 = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:")
    end8 = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
    item9 = content_tibet[start8:end8]

    start9 = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:")
    end9 = content_tibet.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
    item10 = content_tibet[start9:end9]

    result1 = ''
    result2 = ''
    result3 = ''
    # ===============  –ó–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏ ======================
    if "—Å—Ç—Ä–∏–∂–∫–∏" in item1 and "–ü–æ–µ–∑–¥–∫–∞" not in item1 and "–ø–æ–µ–∑–¥–∫–∏:" not in item1:
        idx_sub_start = item1.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
        idx_sub_end = item1.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
        result1 = item1[idx_sub_start:idx_sub_end]
    elif "–ü–æ–µ–∑–¥–∫–∞" not in item2 and "–ø–æ–µ–∑–¥–∫–∏:" not in item2:
        result1 = item2
    elif "–ü–æ–µ–∑–¥–∫–∞" in item2:
        idx_sub_start = item2.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
        idx_sub_end = item2.find("–ü–æ–µ–∑–¥–∫–∞")
        result1 = item2[idx_sub_start:idx_sub_end]
    elif "–ø–æ–µ–∑–¥–∫–∏:" in item2:
        idx_sub_start = item2.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
        idx_sub_end = item2.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:")
        result1 = item2[idx_sub_start:idx_sub_end]

    # ===============  –ó–∞–ø—Ä–æ—Å –¥–ª—è –º—ã—Ç—å—è ======================
    if "–º—ã—Ç—å—è" in item3:
        idx_sub_start = item3.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
        idx_sub_end = item3.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç—Ä–∏–∂–∫–∏")
        result2 = item3[idx_sub_start:idx_sub_end]
    elif "–ü–æ–µ–∑–¥–∫–∞" not in item4 and "–ø–æ–µ–∑–¥–∫–∏:" not in item4:
        result2 = item4
    elif "–ü–æ–µ–∑–¥–∫–∞" in item4:
        idx_sub_start = item4.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
        idx_sub_end = item4.find("–ü–æ–µ–∑–¥–∫–∞")
        result2 = item4[idx_sub_start:idx_sub_end]
    elif "–ø–æ–µ–∑–¥–∫–∏:" in item4:
        idx_sub_start = item4.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º—ã—Ç—å—è")
        idx_sub_end = item4.find("–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:")
        result2 = item4[idx_sub_start:idx_sub_end]


    # ===============  –ü–æ–µ–∑–¥–∫–∞ ======================
    if "–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:" in item5 and "–º—ã—Ç—å—è" not in item5 and "—Å—Ç—Ä–∏–∂–∫–∏" not in item5:
        result3 = item5
    elif "–ü–æ–µ–∑–¥–∫–∞" in item6 and "–º—ã—Ç—å—è" not in item6 and "—Å—Ç—Ä–∏–∂–∫–∏" not in item6:
        result3 = item6
    elif "–ü–æ–µ–∑–¥–∫–∞" in item7 and "–º—ã—Ç—å—è" not in item7 and "—Å—Ç—Ä–∏–∂–∫–∏" not in item7:
        result3 = item7
    elif "–ü–æ–µ–∑–¥–∫–∞" in item8 and "–º—ã—Ç—å—è" not in item8 and "—Å—Ç—Ä–∏–∂–∫–∏" not in item8:
        result3 = item8
    elif "–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:" in item9 and "–º—ã—Ç—å—è" not in item9 and "—Å—Ç—Ä–∏–∂–∫–∏" not in item9:
        result3 = item9
    elif "–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∫–∏:" in item10 and "–º—ã—Ç—å—è" not in item10 and "—Å—Ç—Ä–∏–∂–∫–∏" not in item10:
        result3 = item10

    # ================================== –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –ø–æ –¢–∏–±–µ—Ç—É ===========================================

    await bot.edit_message_text(text=f'\n üóì  <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–∞—Ç—É :   {date_str}</b>'
                                     f'\n-------------------------------'
                                     f'\n  - <b><u> {DSymbol}</u></b>'
                                     f'\n   -  {DSymbolo}'
                                     f'\n -------------------------------------'
                                     f'\n  ‚úÖ -  {DayPlus}'
                                     f'\n  ‚õîÔ∏è -  {DayMinus}'
                                     f'\n -------------------------------------'
                                     f'\n{str(DMoon).strip()}'
                                , chat_id=waitfor.chat.id, message_id=waitfor.message_id, parse_mode='html')

    if not stars:
        await message.answer(f'\n ‚≠êÔ∏è<b><u> C–∏–º–≤–æ–ª—ã –¥–Ω—è –∏ –ª–µ—Ç—è—â–∏–µ –∑–≤—ë–∑–¥—ã </u></b>'
                             f'\n---------------------------------------'
                             f'\n –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
                             , parse_mode='html')
    else:
        await message.answer(
            f'\n ‚≠êÔ∏è<b> C–∏–º–≤–æ–ª—ã –¥–Ω—è –∏ –ª–µ—Ç—è—â–∏–µ –∑–≤—ë–∑–¥—ã </b>'
            f'\n---------------------------------------'
            f' {f"<b>{collision1}</b>" if collision1 else ""}'
            f' {f"{collision1o}" if collision1 else ""}'
            f' {f"<b>{collision2}</b>" if collision2 else ""}'
            f' {f"{collision2o}" if collision2o and collision2 and collision2o != sha1o else ""}'
            f' {f"<b>{sha1}</b>" if sha1 else ""}'
            f' {f"{sha1o}" if sha1o and not sha2 else ""}'
            f' {f"<b>{sha2}</b>" if sha2 else ""}'
            f' {f"{sha2o}" if not sha1o and sha2o else ""}'
            f' {f"{sha2o}" if sha2o and sha2 and sha2o == sha1o else ""}'
            f' {f"<b>{positive1}</b>" if positive1 else ""}'
            f' {f"{positive1o}" if positive1o and positive1 and positive1o[:-1] != negativeo else ""}'
            f' {f"<b>{positive2}</b>" if positive2 else ""}'
            f' {f"{positive2o}" if positive2o else ""}'
            f' {f"<b>{symbolMKD}</b>" if symbolMKD else ""}'
            f' {f"<b>{negative}</b>" if negative else ""}'
            f' {f"{negativeo}" if negativeo else ""}'
            f' {f"{collision1o}" if not negativeo and negative else ""}'
            , parse_mode='html')

    await message.answer(f'\n  ‚õ©  <b> –¢–∏–±–µ—Ç—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã </b>'
                         f'\n  --------------------------------'
                         f'\n  üôè  {holiday}'
                         f'\n  --------------------------------'
                         f'\n  ‚úÇÔ∏è  {result1}'
                         f'\n  --------------------------------'
                         f'\n  üöø  {result2}'
                         f'\n  --------------------------------'
                         f'\n  üõ∫  {result3}'
                         , parse_mode='html')



if __name__ == '__main__':
    yesterday = get_yesterday()
    MoonDay(yesterday)
    today = get_today()
    MoonDay(today)
    tomorrow = get_tomorrow()
    MoonDay(tomorrow)
    Printersimbols()

# file_handler.close()
executor.start_polling(dp)