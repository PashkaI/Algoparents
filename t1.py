from aiogram import Bot, Dispatcher, executor, types
import datetime
import time
import requests
import sqlite3
from bs4 import BeautifulSoup, Comment
from apscheduler.schedulers.background import BackgroundScheduler
import subprocess
import os
import sys
import logging
from logging.handlers import RotatingFileHandler

bot = Bot('5838878828:AAFVtAnF6732ccUcjG8DnFWddZKTMvM74Fo')
dp = Dispatcher(bot)

scheduler = BackgroundScheduler()
content = ''
bill = ''

def GetContent():
    global content, bill
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
    session = requests.Session()
    url1 = f"https://backoffice.algoritmika.org/student?StudentSearch%5Bgroup_student_status%5D=0&StudentSearch%5Bcontent_type%5D%5B0%5D=course&StudentSearch%5Bcontent_type%5D%5B1%5D=intensive&StudentSearch%5BgroupType%5D%5B0%5D=masterclass&StudentSearch%5BgroupType%5D%5B1%5D=regular&StudentSearch%5BgroupType%5D%5B2%5D=intensive&StudentSearch%5BgroupType%5D%5B3%5D=individual&StudentSearch%5BisCourseInProgress%5D=1&presetType=active_v2&export=true&name=default&exportType=html"
    url2 = f"https://backoffice.algoritmika.org/payment/manage?PaymentSearch%5Bid%5D=&PaymentSearch%5Bcreated_at%5D=&PaymentSearch%5BpaymentCreatedAtStart%5D=&PaymentSearch%5BpaymentCreatedAtEnd%5D=&PaymentSearch%5Bcent_amount_received%5D=&PaymentSearch%5BstudentId%5D=&PaymentSearch%5Bcent_amount_paid%5D=&PaymentSearch%5Bfullname%5D=&PaymentSearch%5BinvoiceCredits%5D=&PaymentSearch%5Bupdated_at%5D=&PaymentSearch%5BpaymentUpdatedAtStart%5D=&PaymentSearch%5BpaymentUpdatedAtEnd%5D=&PaymentSearch%5Bstatus%5D=&PaymentSearch%5Breceipt_status%5D=&PaymentSearch%5Bpayment_type%5D=&PaymentSearch%5Bis_primary%5D=&PaymentSearch%5BactiveCourse%5D=&PaymentSearch%5BupdatedBy%5D=&PaymentSearch%5BcontractNumber%5D=&page=1&per-page=200&export=true&name=default&exportType=html"

    # –ó–Ω–∞—á–µ–Ω–∏–µ cookie
    cookie_value = 'SL_G_WPT_TO=en; SL_GWPT_Show_Hide_tmp=1; SL_wptGlobTipTmp=1; _gid=GA1.2.1042649071.1684313787; _ym_uid=1684313787290135952; _ym_d=1684313787; intercom-device-id-ufjpx6k3=1b691db9-8635-4458-8134-4639ff5cf647; _grid_page_size=d3ebbdf9ec9235bfc4ba59572a6d3dd403a563222be148e9c705e91612194e49a:2:{i:0;s:15:"_grid_page_size";i:1;s:3:"200";}; _grid_page_size_schedule=35d0980fa38e2255112d0c62698773cab8aa12a81c6735caf172064b5eb6ea47a:2:{i:0;s:24:"_grid_page_size_schedule";i:1;s:3:"200";}; _ym_isad=1; _ym_visorc=w; SERVERID=b440; userId=30450; createdTimestamp=1684491765; accessToken=e3e8e46e853131801497846ff6ff3f0437fcb1314d3fd67a9e0e8bc8519672c0; SERVERID=b530; _backendMainSessionId=c7ed2d7e4366e399f6ffacf63bc557d3; _ga_3QSGZBLTE3=GS1.1.1684490453.14.1.1684491769.0.0.0; _ga=GA1.2.1661591960.1684313787; _gat_gtag_UA_122842599_49=1; intercom-session-ufjpx6k3=eGQ1V0RLZVNGZnM3c3ZvRVJ6aysrYWFkbFd1ekhRaHpheGdSdnVMT1RSYWkyTTBIS3d3Z1J0d0NYTDl2aXZrQS0tNkM4MlVQaGpaSkl6TUhRdFVmalRhZz09--93e556a9a2e94a64baae806ef37b1b177231cf04'

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è cookie
    cookie_list = cookie_value.split('; ')

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è cookie
    for cookie in cookie_list:
        cookie_name, cookie_value = cookie.split('=', 1)
        session.cookies.set(cookie_name, cookie_value)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–∞–π—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö cookie
    response = session.get(url1)
    response1 = session.get(url2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if response.status_code == 200:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        content = response.text
        print(content)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if response1.status_code == 200:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        bill = response1.text
        print(bill)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')

GetContent()
# scheduler.add_job(GetContent, 'cron', hour=14, minute=31, second=10)
#
# scheduler.start()

# =================== –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫ ======================
def getuserid(nameid):
    conn = sqlite3.connect('userdata.sql')
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE pass=?", (nameid,))
    existing_record = cur.fetchone()
    if existing_record:
        userid = existing_record[-2]
    cur.close()
    conn.close()
    return userid

def getlanguage(nameid):
    conn = sqlite3.connect('userdata.sql')
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE pass=?", (nameid,))
    existing_record = cur.fetchone()
    if existing_record:
        userlang = existing_record[-1]
    cur.close()
    conn.close()
    return userlang

# ============== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ë–æ—Ç–∞ ========================
@dp.message_handler(commands=['start'])
async def main(message):
    name = message.from_user.first_name
    nameid = message.from_user.id
    conn = sqlite3.connect('userdata.sql')                      # utc INTEGER
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(50), '
                'pass varchar(50), utc integer, lang integer)')
    cur.execute("SELECT * FROM users WHERE name=? AND pass=?", (name, nameid))
    existing_record = cur.fetchone()
    if existing_record:
        await message.answer( "Welcome again")
    else:
        cur.execute("INSERT INTO users (name, pass, utc, lang) VALUES (?, ?, ?, ?)", (name, nameid, 1, 1))
        conn.commit()
        #bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")   .from_user.first_name
    cur.close()
    conn.close()
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üá¨üáß English', callback_data='Eng')
    btn2 = types.InlineKeyboardButton('üáµüá± Polish', callback_data='Pol')
    markup.row(btn1, btn2)
    if message.chat.type == 'private':
        await message.answer(               f'  Hello, <b>{name}!</b> '
                                        f'\nWelcome to the Algo - Parents Bot'
                                        f'\nChoose your <b>language</b> and '
                                        f"\nPlease enter the <b>student's ID</b>"
                                        ,parse_mode='html', reply_markup=markup)
    else:
        await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id,
                                            reply_markup=markup)

@dp.message_handler(commands=['get_users'])
async def allusers(message):
    conn = sqlite3.connect('userdata.sql')
    cur = conn.cursor()
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()
    info = ''
    for el in users: info += f'Name: {el[1]}, ID:{el[2]}, utc:{el[3]}, lang:{el[4]}\n'
    cur.execute("SELECT COUNT(*) FROM users")
    count = cur.fetchone()[0]
    cur.close()
    conn.close()
    await message.answer(f'{count}\n{info}')

@dp.message_handler(commands=['getuser'])
async def getuser(message, nameid=None):
    if nameid is None:
        nameid = message.from_user.id
    userid = getuserid(nameid)
    userlang = getlanguage(nameid)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BeautifulSoup
    soup = BeautifulSoup(content, 'html.parser')

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ (tr) –≤ —Ç–∞–±–ª–∏—Ü–µ
    rows = soup.find_all('tr')
    name = ''
    lessons_completed = ''
    start_date = ''
    group_type = ''
    student_status = ''
    lessons_attended = ''
    lessons_missed = ''
    paid = ''
    lessons_paid = ''
    balance = ''

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    for row in rows[1:]:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫ (td) –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
        cells = row.find_all('td')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –≤ User —Å –Ω–æ–º–µ—Ä–æ–º –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
        if userid == int(cells[0].text):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —è—á–µ–µ–∫
            name = cells[1].text
            lessons_completed = int(cells[2].text)
            start_date = cells[3].text
            group_type = cells[4].text
            student_status = cells[5].text
            lessons_attended = int(cells[6].text)
            lessons_missed = int(cells[7].text)
            paid = int(cells[8].text)
            lessons_paid = int(cells[9].text)
            balance = int(cells[10].text)
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è User –Ω–∞–π–¥–µ–Ω—ã

    print("–ó–∞–ø—Ä–æ—Å –¥–ª—è :", name)
    if userlang == 1:
        await message.answer(
            f'<b><u>Basic information about the student :</u></b>'
            f'\nName ........... <b>{name}</b>'
            f'\nLessons passed in group: ......... {lessons_completed}'
            f'\nGroup start: .................. {start_date}'
            #f'\nGroup type: -  {group_type}'
            #f'\nStudent status in the group: -  {student_status}'
            f'\nAttended lessons: ...................... {lessons_attended}'
            f'\nMissed lessons: ........................... {lessons_missed}'
            f'\nPaid total: .............................. {paid}'
            f'\nPaid for lessons: ........................ {lessons_paid}'
            f'\nBalance: ...................................... {balance}'
            ,parse_mode='html')

    if userlang == 2:
        await message.answer(
            f'<b><u>Podstawowe informacje o uczniu :</u></b>'
            f'\nImiƒô i nazwisko - {name}'
            f'\nLekcje zaliczone w grupie: ..... {lessons_completed}'
            f'\nPoczƒÖtek grupy: ........ {start_date}'
            #f'\nGroup type: -  {group_type}'
            #f'\nStudent status in the group: -  {student_status}'
            f'\nUczƒôszczane lekcje: ............... {lessons_attended}'
            f'\nNieodebrane lekcje: ................. {lessons_missed}'
            f'\nZap≈Çacone razem: .............. {paid}'
            f'\nP≈Çatne za lekcje: ..................... {lessons_paid}'
            f'\nSaldo: ...................................... {balance}'
            ,parse_mode='html')

@dp.message_handler(commands=['billinfo'])
async def billinf(message, nameid=None):
    if nameid is None:
        nameid = message.from_user.id
    userid = getuserid(nameid)
    userlang = getlanguage(nameid)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BeautifulSoup
    soup = BeautifulSoup(bill, 'html.parser')

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ (tr) –≤ —Ç–∞–±–ª–∏—Ü–µ
    rows = soup.find_all('tr')
    field1 = ''
    field2 = ''
    field3 = ''
    field4 = ''
    field5 = ''

    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    matching_values = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    for row in rows[1:]:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫ (td) –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
        cells = row.find_all('td')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –≤ User —Å –Ω–æ–º–µ—Ä–æ–º –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
        if userid == int(cells[2].text):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —è—á–µ–µ–∫
            field1 = cells[0].text
            field2 = cells[1].text
            field3 = cells[3].text
            field4 = cells[4].text
            field5 = int(cells[5].text)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
            matching_values.append([field1, field2, field3, field4, field5])

    print("–ó–∞–ø—Ä–æ—Å –¥–ª—è :", field4)
    if userlang == 1:
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        output_message = '<b><u>Payment Information :</u></b>'

        # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for values in matching_values:
            field1, field2, field3, field4, field5 = values

            output_message += (
                f'\nPayment date -  {field1}'
                f'\nbilled for payment -  {field2}'
                f'\nReceived -  {field3}'
                # f'\nGroup type: -  {group_type}'
                # f'\nStudent status in the group: -  {student_status}'
                f'\nNumber of paid lessons -  {field5}'
                f'\n----------'
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        await message.answer(output_message, parse_mode='html')

    if userlang == 2:
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        output_message = '<b><u>Informacje o p≈Çatno≈õciach :</u></b>'

        # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for values in matching_values:
            field1, field2, field3, field4, field5 = values

            output_message += (
                f'\nTermin p≈Çatno≈õci -  {field1}'
                f'\nDo zap≈Çaty -  {field2}'
                f'\nOtrzymany -  {field3}'
                # f'\nGroup type: -  {group_type}'
                # f'\nStudent status in the group: -  {student_status}'
                f'\nLiczba p≈Çatnych lekcji -  {field5}'
                f'\n----------'
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        await message.answer(output_message, parse_mode='html')

# ========================================================================================================
#                       –û–±—Ä–∞–±–æ—Ç–∫–∞  –ó–∞–ø—Ä–æ—Å–æ–≤  Callback
# ========================================================================================================
@dp.callback_query_handler()
async def callback(call):

    if call.data == 'Pol':
        nameid = call.from_user.id
        conn = sqlite3.connect('userdata.sql')
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE pass=?", (nameid,))
        existing_record = cur.fetchone()
        if existing_record:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cur.execute("UPDATE users SET lang = ? WHERE pass = ?", (2, nameid))
            conn.commit()
        cur.close()
        conn.close()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        btn1 = types.KeyboardButton('Informacje o studencie')
        btn2 = types.KeyboardButton('Informacje o p≈Çatno≈õciach')
        markup.row(btn1, btn2)
        await bot.send_message(call.message.chat.id, f'Wybra≈Çe≈õ jƒôzyk polski', reply_markup=markup)

    elif call.data == 'Eng':
        nameid = call.from_user.id
        conn = sqlite3.connect('userdata.sql')
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE pass=?", (nameid,))
        existing_record = cur.fetchone()
        if existing_record:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cur.execute("UPDATE users SET lang = ? WHERE pass = ?", (1, nameid))
            conn.commit()
        cur.close()
        conn.close()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        btn1 = types.KeyboardButton('User Information')
        btn2 = types.KeyboardButton('Bill Information')
        markup.row(btn1, btn2)
        await bot.send_message(call.message.chat.id, f'You have chosen English', reply_markup=markup)


#============================ –ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –ø–æ –Ω–æ–º–µ—Ä—É =========================
@dp.message_handler(content_types=['text'])
async def fordate(message):
    nameid = message.from_user.id
    userid = message.text.strip().lower()
    if userid.isdigit():
        userid = int(userid)
        #---------------------------
        soup = BeautifulSoup(content, 'html.parser')
        rows = soup.find_all('tr')
        name = ''
        for row in rows[1:]:
            cells = row.find_all('td')
            if userid == int(cells[0].text):
                name = cells[1].text
                break
        print(name)
        print(userid)

        if name == '':
            await message.answer(f'Student - {userid} - not found', parse_mode='html')
        else:
        #---------------------------
            conn = sqlite3.connect('userdata.sql')
            cur = conn.cursor()
            cur.execute("SELECT * FROM users WHERE pass=?", (nameid,))
            existing_record = cur.fetchone()
            if existing_record:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cur.execute("UPDATE users SET utc = ? WHERE pass = ?", (userid, nameid))
                conn.commit()
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                cur.execute("SELECT utc FROM users WHERE pass=?", (nameid,))
            cur.close()
            conn.close()
            print(userid)
            await message.answer(f'Information on <b>{name}</b>', parse_mode='html')

    elif userid == 'user information' or userid == 'bill information':
        if userid == 'user information': await getuser(message, nameid)
        if userid == 'bill information': await billinf(message, nameid)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    elif userid == 'informacje o studencie' or userid == 'informacje o p≈Çatno≈õciach':
        if userid == 'informacje o studencie': await getuser(message, nameid)
        if userid == 'informacje o p≈Çatno≈õciach': await billinf(message, nameid)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    else:
        # –í–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        await bot.send_message(message.chat.id, f'Student ID was entered incorrectly. Enter only numbers.'
                            f'\n----------'                    
                            f'\nIdentyfikator ucznia zosta≈Ç wprowadzony nieprawid≈Çowo. Nale≈ºy wprowadziƒá tylko cyfry')

# file_handler.close()
executor.start_polling(dp)