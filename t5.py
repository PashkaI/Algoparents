import telebot
import webbrowser
import sqlite3
from telebot import types
from datetime import datetime
import datetime
import requests
from bs4 import BeautifulSoup, Comment
from apscheduler.schedulers.background import BackgroundScheduler


bot = telebot.TeleBot('6024265589:AAEAsVOB-0w-IaeoS3Ach9bZxLxlg9U7MOo')

presentday = datetime.date.today()
yesterday = presentday - datetime.timedelta(days=1)
tomorrow = presentday + datetime.timedelta(days=1)

scheduler = BackgroundScheduler()
moon = ''
hours = ''
content_today = ''
content_yesterday = ''
content_tomorrow = ''


# ================= –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á–∞—Å–∞ –Ω–∞ –¥–µ–Ω—å ====================
def DayAnimals(data_url=datetime.datetime.now().strftime("%d-%m-%Y")):
    url = f"https://www.mingli.ru/{data_url}"
    soup = BeautifulSoup(requests.get(url).text, 'html.parser')
    DayHour = ''
    Animals = ''
    try:
        if datetime.datetime.now().time() >= datetime.time(23, 1) and datetime.datetime.now().time() <= datetime.time( 23, 59):
            DayHour = soup.find('div', class_='Content').findAll('td')[-1]
            Animals = '–ß–∞—Å –ö—Ä—ã—Å—ã üêÅ —Å 23:00 –¥–æ 01:00'
        elif datetime.datetime.now().time() >= datetime.time(21, 1) and datetime.datetime.now().time() <= datetime.time(23, 00):
            DayHour = soup.find('div', class_='Content').findAll('td')[-2]
            Animals = '–ß–∞—Å –°–≤–∏–Ω—å–∏ üêñ —Å 21:00 –¥–æ 23:00'
        elif datetime.datetime.now().time() >= datetime.time(19, 1) and datetime.datetime.now().time() <= datetime.time(21, 00):
            DayHour = soup.find('div', class_='Content').findAll('td')[-3]
            Animals = '–ß–∞—Å –°–æ–±–∞–∫–∏ üêï —Å 19:00 –¥–æ 21:00'
        elif datetime.datetime.now().time() >= datetime.time(17, 1) and datetime.datetime.now().time() <= datetime.time(19, 00):
            DayHour = soup.find('div', class_='Content').findAll('td')[-4]
            Animals = '–ß–∞—Å –ü–µ—Ç—É—Ö–∞ üêì —Å 17:00 –¥–æ 19:00'
        elif datetime.datetime.now().time() >= datetime.time(15, 1) and datetime.datetime.now().time() <= datetime.time(17, 00):
            DayHour = soup.find('div', class_='Content').findAll('td')[-5]
            Animals = '–ß–∞—Å –û–±–µ–∑—å—è–Ω—ã üêí —Å 15:00 –¥–æ 17:00'
        elif datetime.datetime.now().time() >= datetime.time(13, 1) and datetime.datetime.now().time() <= datetime.time(15, 00):
            DayHour = soup.find('div', class_='Content').findAll('td')[-6]
            Animals = '–ß–∞—Å –ö–æ–∑—ã üêê —Å 13:00 –¥–æ 15:00'
        elif datetime.datetime.now().time() >= datetime.time(11, 1) and datetime.datetime.now().time() <= datetime.time(13, 00):
            DayHour = soup.find('div', class_='Content').findAll('td')[-7]
            Animals = '–ß–∞—Å –õ–æ—à–∞–¥–∏ üêé —Å 11:00 –¥–æ 13:00'
        elif datetime.datetime.now().time() >= datetime.time(9, 1) and datetime.datetime.now().time() <= datetime.time(11, 00):
            DayHour = soup.find('div', class_='Content').findAll('td')[-8]
            Animals = '–ß–∞—Å –ó–º–µ–∏ üêç —Å 09:00 –¥–æ 11:00'
        elif datetime.datetime.now().time() >= datetime.time(7, 1) and datetime.datetime.now().time() <= datetime.time( 9, 00):
            DayHour = soup.find('div', class_='Content').findAll('td')[-9]
            Animals = '–ß–∞—Å –î—Ä–∞–∫–æ–Ω–∞ üêâ —Å 07:00 –¥–æ 09:00'
        elif datetime.datetime.now().time() >= datetime.time(5, 1) and datetime.datetime.now().time() <= datetime.time(7, 00):
            DayHour = soup.find('div', class_='Content').findAll('td')[-10]
            Animals = '–ß–∞—Å –ö—Ä–æ–ª–∏–∫–∞ üêá —Å 05:00 –¥–æ 07:00'
        elif datetime.datetime.now().time() >= datetime.time(3, 1) and datetime.datetime.now().time() <= datetime.time(5, 00):
            DayHour = soup.find('div', class_='Content').findAll('td')[-11]
            Animals = '–ß–∞—Å –¢–∏–≥—Ä–∞ üêÖ —Å 03:00 –¥–æ 05:00'
        elif datetime.datetime.now().time() >= datetime.time(1, 1) and datetime.datetime.now().time() <= datetime.time(3, 00):
            DayHour = soup.find('div', class_='Content').findAll('td')[-12]
            Animals = '–ß–∞—Å –ë—ã–∫–∞ üêÇ —Å 01:00 –¥–æ 03:00'
        elif datetime.datetime.now().time() >= datetime.time(0, 00) and datetime.datetime.now().time() <= datetime.time(1, 00):
            DayHour = soup.find('div', class_='Content').findAll('td')[-13]
            Animals = '–ß–∞—Å –ö—Ä—ã—Å—ã üêÅ —Å 23:00 –¥–æ 01:00'
    except:
        DayHour = ''

    return DayHour, Animals

# ========================== –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª—É–Ω–Ω–æ–≥–æ –¥–Ω—è ==============
def MoonDay(data_url=datetime.datetime.now().strftime("%d-%m-%Y")):
    global moon
    url = f"https://www.mingli.ru/{data_url}"
    soup = BeautifulSoup(requests.get(url).text, 'html.parser')
    try:  # –í—ã—Ç—è–≥–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –õ—É–Ω–Ω–æ–≥–æ –¥–Ω—è
        moon = soup.find('div', class_='Content').find('div', class_='firstInfo').find('div', class_='MoonDay') \
                      .find_all(string=lambda text: isinstance(text, Comment))[1].split('DNone">')[1][:-13]
    except:
        moon = ''
    return moon
scheduler.add_job(MoonDay, 'cron', hour=10, minute=38)

# ============== –í—ã–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Ç—Ä–∏ –¥–Ω—è —Å–æ –∑–≤—ë–∑–¥–∞–º–∏ ==============
def StarsDay(data_url):
    global content_today, content_yesterday, content_tomorrow
    url = f"https://www.mingli.ru/{data_url.strftime('%d-%m-%Y')}"
    soup = BeautifulSoup(requests.get(url).text, 'html.parser')
    content = soup.find('div', class_='Content').find('div', class_='firstInfo')
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    if data_url == presentday:
        content_today = content
    elif data_url == yesterday:
        content_yesterday = content
    elif data_url == tomorrow:
        content_tomorrow = content
    return content

#-------------------------------------------------------------------------
scheduler.add_job(StarsDay, 'cron', hour=7, minute=8, second=30, args=[presentday])
scheduler.add_job(StarsDay, 'cron', hour=7, minute=8, second=40, args=[yesterday])
scheduler.add_job(StarsDay, 'cron', hour=7, minute=8, second=50, args=[tomorrow])
# ============== –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–≤—É—Ö—á–∞—Å–æ–≤–æ–∫ ==============================
def Hours(data_url=datetime.datetime.now().strftime("%d-%m-%Y")):
    global hours
    url = f"https://www.mingli.ru/{data_url}"
    soup = BeautifulSoup(requests.get(url).text, 'html.parser')
    hours = soup.find('div', class_='Content').findAll('td')[-5]
    return hours
scheduler.add_job(Hours, 'cron', hour=8, minute=3)
#scheduler.start()

# ============== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ë–æ—Ç–∞ =================================================================
@bot.message_handler(commands=['start'])
def main(message):
    name = message.from_user.first_name
    nameid = message.from_user.id
    conn = sqlite3.connect('userdata.sql')
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(50), pass varchar(50))')
    cur.execute("SELECT * FROM users WHERE name=? AND pass=?", (name, nameid))
    existing_record = cur.fetchone()
    if existing_record:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è —Å–Ω–æ–≤–∞")
    else:
        cur.execute("INSERT INTO users (name, pass) VALUES (?, ?)", (name, nameid))
        conn.commit()
        #bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    cur.close()
    conn.close()
    bot.send_message(message.chat.id,   f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}.</b> '
                                        f'\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —ç–∑–æ—Ç–µ—Ä–∏–∫–æ–≤ :)'
                                        f'\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ—á–∏—Ç–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É :'
                                        f'\n–î–ª—è —ç—Ç–æ–≥–æ —Ç–∞–ø–Ω–∏ –Ω–∞ <b> /help </b>'
                                        ,parse_mode='html')

@bot.message_handler(commands=['show_me_the_users'])
def allusers(message):
    conn = sqlite3.connect('userdata.sql')
    cur = conn.cursor()
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()
    info = ''
    for el in users: info += f'Name: {el[1]}, ID:{el[2]}\n'
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, info)
    #bot.send_message(237863350, '–ü—Ä–∏–≤–µ—Ç, –Ø —Ç–µ–±—è –Ω–∞—à—ë–ª!')
    # bot.send_message(5089599713, '–ê—Ö—Ö–∞—Ö–∞—Ö. –í–æ—Ç –∏ –≤—Å—ë. –¢–µ–ø–µ—Ä—å —Ç—ã –æ—Ç –º–µ–Ω—è –Ω–µ –æ—Ç–¥–µ–ª–∞–µ—à—å—Å—è. –ü–∞—à–∫–∞ –º–µ–Ω—è –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –¥–æ–ø–∏–ª–∏–ª –∏'
    #                              '—Ç–µ–ø–µ—Ä—å —è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π AI ')

@bot.message_handler(commands=['profile'])
def profile(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üìç –£–∫—Ä–∞–∏–Ω–∞', callback_data='Ukr')
    btn2 = types.InlineKeyboardButton('üìç –ü–æ–ª—å—à–∞', callback_data='888')
    btn3 = types.InlineKeyboardButton('Ô∏èÔ∏èüìç –°–®–ê', callback_data='888')
    markup.row(btn1, btn2, btn3)

    #markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))
    bot.send_message(message.chat.id,   f'\nüë§  <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>'
                                        f'\n-------------------------------'
                                        f'\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥ –∏–º–µ–Ω–µ–º : {message.from_user.first_name}.'
                                        f' –î–ª—è —Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏,'
                                        f' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–∏ —á–∞—Å—ã'
                                        f'\n –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É <b>üìç—Å—Ç—Ä–∞–Ω—É</b> –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ : '
                                        # f'\n–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è <b> /location </b>'
                                        f'\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
                          ,reply_markup=markup, parse_mode='html')

# ======================================================================================================
#                 –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# ======================================================================================================

def send_moon_to_user(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))
    bot.send_message(chat_id, f'\nüë§  <b>–õ—É–Ω–Ω—ã–π –¥–µ–Ω—å :</b>'
                              f'\n-------------------------------'
                              f'\n –ó–Ω–∞—á–µ–Ω–∏–µ - : {moon}.'
                      , reply_markup=markup, parse_mode='html')

@bot.message_handler(commands=['mooner'])
def mooner(message):
    send_moon_to_user(message.chat.id)

scheduler.add_job(send_moon_to_user, 'cron', hour=8, minute=5, args=[237863350])

# ========================================================================================================
#        –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ–ø–∏—Å–∞—Ç—å —Ç—É—Ç —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –¥–∞—Ç—É –∏ –µ—ë —Ä–∞–±–æ—Ç—É
# ========================================================================================================
def send_day(chat_id):
    waitfor = bot.send_message(chat_id, '–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ ... ‚åõÔ∏è')
    try:
        DSymbol = content_today.find('h5', class_='CzjanChu').text
    except:
        DSymbol = ''
    try:
        DSymbolo = content_today.find('p', class_='CzjanChu').text
    except:
        DSymbolo = ''
    try:
        DayPlus = content_yesterday.find('h5', class_='CzjanChu').text
    except:
        DayPlus = ''
    try:
        DayMinus = content_tomorrow.find('h5', class_='CzjanChu').text
    except:
        DayMinus = ''
    try:
        DMoon = content_today.find('div', class_='MoonDay').text
    except:
        DMoon = ''

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back')
    btn2 = types.InlineKeyboardButton('üîé  –ß–∞—Å –Ω–∞ —Å–µ–π—á–∞—Å', callback_data='hour')
    markup.row(btn1, btn2)
    bot.edit_message_text(f'\n üìÖ  <b>–°–µ–≥–æ–¥–Ω—è :   {datetime.datetime.now().strftime("%d")}-'
                                        f'{datetime.datetime.now().strftime("%m")}-'
                                        f'{datetime.datetime.now().strftime("%Y")}</b>'
                                        f'\n-------------------------------'
                                        f'\n  - <b><u> {DSymbol}</u></b>'
                                        f'\n   -  {DSymbolo}'
                                        f'\n -------------------------------------'
                                        f'\n  ‚úÖ -  {DayPlus}'
                                        f'\n  ‚õîÔ∏è -  {DayMinus}'
                                        f'\n -------------------------------------'
                                        f'\n{str(DMoon).strip()}'
                                        f'\n{presentday}'
                          , chat_id=waitfor.chat.id, message_id=waitfor.message_id
                          , reply_markup=markup, parse_mode='html')
@bot.message_handler(commands=['polday'])
def polday(message):
    send_day(message.chat.id)

# ========================================================================================================
#                                   –®–µ–¥—É–ª–µ—Ä—ã —Ç—É—Ç –±—É–¥—É—Ç
# ========================================================================================================

scheduler.add_job(send_day, 'cron', hour=12, minute=23, args=[237863350])
scheduler.start()
# ========================================================================================================

@bot.message_handler(commands=['main'])
def main(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üìÖ  –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='today')
    markup.row(btn1)
    btn2 = types.InlineKeyboardButton('üåì –õ—É–Ω–Ω—ã–π –î–µ–Ω—å', callback_data='moon')
    btn3 = types.InlineKeyboardButton('Ô∏èÔ∏è‚≠êÔ∏è  –ó–≤—ë–∑–¥—ã', callback_data='stars')
    markup.row(btn2, btn3)
    btn4 = types.InlineKeyboardButton('üß≠ –í—Å–µ —á–∞—Å—ã', callback_data='hours')
    btn5 = types.InlineKeyboardButton('‚ùì –ü–æ–º–æ—â—å', callback_data='help')
    markup.row(btn4, btn5)

    bot.send_message(message.chat.id, f'\nüí°  <b>–ú–µ–Ω—é</b>'
                                      f'\n  ------------'
                                      f'\n  –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.'
                                      f'\n–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–∞ —á–∞—Å –ø–æ –∫–∏—Ç–∞–π—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é.'
                                      f' –ü–æ–∫–∞–∑–∞—Ç—å –ª—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –∏ —É–∑–Ω–∞—Ç—å —Å–∏–º–≤–æ–ª –¥–Ω—è.'
                                      f'\n–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'

                                    ,reply_markup=markup, parse_mode='html')

@bot.message_handler(commands=['time'])
def send_time(message):
    current_time = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S") # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–µ –≤ —Å—Ç—Ä–æ–∫—É
    bot.reply_to(message, f"–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¢–ï–°–¢: {current_time}") # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º

@bot.message_handler(commands=['test'])
def test(message):

    bot.reply_to(message, f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {hours}")

@bot.message_handler(commands=['site'])
def site(message):
    webbrowser.open('https://google.com')

@bot.message_handler(commands=['help'])
def help(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))
    bot.send_message(message.chat.id,   f'\nüîπ  <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>'
                                        f'\n'
                                        f'\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é <b> /main </b>'
                                        f'\n–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å <b> /day </b>'
                                        f'\n–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ß–∞—Å <b> /hour </b>'
                                        f'\n–õ—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å <b> /moon </b>'
                                        f'\nC–∏–º–≤–æ–ª—ã –¥–Ω—è –ø–æ –∑–≤—ë–∑–¥–∞–º<b> /stars </b>'
                                        f'\n–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b> /profile </b>'
                                        f'\n–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è <b> /time </b>'
                                        f'\n'
                                        f'\nüîπ  <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:</b>'
                                        f'\n'
                                        f'\n–†–æ–±–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–∞ —á–∞—Å –ø–æ –∫–∏—Ç–∞–π—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é.'
                                        f' –ê —Ç–∞–∫ –∂–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –∏ —Å–∏–º–≤–æ–ª –¥–Ω—è.'
                                        f' –í –±—É–¥—É—â–µ–º –≤–æ–∑–º–æ–∂–Ω–æ –µ—â—ë —Å–¥–µ–ª–∞—é –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¢–∏–±–µ—Ç—Å–∫–∏–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º.'
                                        f'\n  --------------------------------'
                                        f'\nüìÖ –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–º –¥–∞—Ç—É, –µ—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ'
                                        f' –≤–≤–µ—Å—Ç–∏ –≤ —á–∞—Ç–µ –±–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY (–ù–∞–ø—Ä–∏–º–µ—Ä: 17-03-2023).'
                                        f'\n'
                                        f'\n–ü–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –ø–∏—Å–∞—Ç—å: @Rts_support'
                          ,reply_markup=markup, parse_mode='html')

@bot.message_handler(commands=['moon'])
def moonday(message):
    waitfor = bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ ... ‚åõÔ∏è')
    #params = MoonDay()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))
    bot.edit_message_text(              f'\n  üåì <b> –õ—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å </b>'
                                        f'\n  --------------------------------'
                                        f'\n   {moon}'
                          ,chat_id=waitfor.chat.id, message_id=waitfor.message_id, reply_markup=markup, parse_mode='html')

@bot.message_handler(commands=['day'])
def today(message):
    waitfor = bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ ... ‚åõÔ∏è')
    #params = StarsDay()
    try:
        DSymbol = content.find('h5', class_='CzjanChu').text
    except:
        DSymbol = ''
    try:
        DSymbolo = content.find('p', class_='CzjanChu').text
    except:
        DSymbolo = ''
    try:
        DayPlus = content.find('p', class_='PlusMinus').text
    except:
        DayPlus = ''
    try:
        DayMinus = content.findAll('p', class_='PlusMinus')[1].text
    except:
        DayMinus = ''
    try:
        DMoon = content.find('div', class_='MoonDay').text
    except:
        DMoon = ''

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back')
    btn2 = types.InlineKeyboardButton('üîé  –ß–∞—Å –Ω–∞ —Å–µ–π—á–∞—Å', callback_data='hour')
    markup.row(btn1, btn2)
    bot.edit_message_text(              f'\n üìÖ  <b>–°–µ–≥–æ–¥–Ω—è :   {datetime.datetime.now().strftime("%d")}-'
                                        f'{datetime.datetime.now().strftime("%m")}-'
                                        f'{datetime.datetime.now().strftime("%Y")}</b>'
                                        f'\n-------------------------------'
                                        f'\n  - <b><u> {DSymbol}</u></b>'
                                        f'\n   -  {DSymbolo}'
                                        f'\n -------------------------------------'
                                        f'\n  ‚úÖ -  {DayPlus}'
                                        f'\n  ‚õîÔ∏è -  {DayMinus}'
                                        f'\n -------------------------------------'
                                        f'\n{str(DMoon).strip()}'
                                    ,chat_id=waitfor.chat.id, message_id=waitfor.message_id, reply_markup=markup, parse_mode='html')

@bot.message_handler(commands=['stars'])
def stars(message):
    waitfor = bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ ... ‚åõÔ∏è')
    params = StarsDay()
    try:  # –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü–∞ (–ù–∞–¥–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å")
        collision1 = params.find('h5', class_='red Collision').text  # .split()[-1]
    except:
        collision1 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—è.
        collision1o = params.findAll('p')[4].text
    except:
        collision1o = ''
    try:  # –í—Ç–æ—Ä–æ–π –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–≤—ã–π –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü–∞ (–ù–∞–¥–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å")
        collision2 = params.findAll('h5', class_='red Collision')[1].text  # .split()[-1]
    except:
        collision2 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—è.
        collision2o = params.findAll('p')[5].text
    except:
        collision2o = ''
    try:  # –ö—Ä–∞—Å–Ω–æ–µ –®–ê –≥–æ–¥–∞
        sha1 = params.find('h5', class_='red Sha').text
    except:
        sha1 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –®–ê
        sha1o = params.find('p', class_='Sha').text
    except:
        sha1o = ''
    try:  # –ö—Ä–∞—Å–Ω–æ–µ –≤—Ç–æ—Ä–æ–µ –®–ê –≥–æ–¥–∞
        sha2 = params.findAll('h5', class_='red Sha')[1].text
    except:
        sha2 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –®–ê
        sha2o = params.findAll('p', class_='Sha')[1].text
    except:
        sha2o = ''
    try:  # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –ó–≤–µ–∑–¥—ã
        positive1 = params.find('h5', class_='positive SymbolStars').text  # –æ—Å—Ç–∞–≤–∏—Ç—å
    except:
        positive1 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        positive1o = params.find('p', class_='SymbolStars').text
    except:
        positive1o = ''
    try:  # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –ó–≤–µ–∑–¥—ã
        positive2 = params.findAll('h5', class_='positive SymbolStars')[1].text
    except:
        positive2 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        positive2o = params.findAll('p', class_='SymbolStars')[2].text
    except:
        positive2o = ''
    try:  # –°–∏–º–≤–æ–ª MKD
        symbolMKD = params.find('div', class_='SymbolStars MKD').text
    except:
        symbolMKD = ''
    try:  # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –ó–≤–µ–∑–¥—ã
        negative = params.find('h5', class_='negative SymbolStars').text
    except:
        negative = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        negativeo = params.findAll('p', class_='SymbolStars')[1].text
    except:
        negativeo = ''

    stars = collision1.strip()+collision1o+collision2.strip()+collision2o+sha1+sha1o.strip()+sha2+sha2o.strip()\
            +positive1+positive1o+positive2+positive2o+symbolMKD+negative+negativeo

    if collision1: collision1 = '\n ‚õîÔ∏è - ' + collision1.strip()
    if collision1o: collision1o = '\n' + collision1o
    if collision2: collision2 = '\n ‚õîÔ∏è - ' + collision2.strip()
    if collision2o: collision2o = '\n' + collision2o
    if sha1: sha1 = '\n ‚õîÔ∏è - ' + sha1.strip()
    if sha1o: sha1o = '\n' + sha1o.strip()
    if sha2: sha2 = '\n ‚õîÔ∏è - ' + sha2
    if sha2o: sha2o = '\n' + sha2o.strip()
    if positive1: positive1 = '\n ‚úÖ - ' + positive1
    if positive1o: positive1o = '\n' + positive1o
    if positive2: positive2 = '\n ‚úÖ - ' + positive2
    if positive2o: positive2o = '\n' + positive2o
    if symbolMKD: symbolMKD = '\n üÄÑÔ∏è - ' + symbolMKD
    if negative: negative = '\n ‚õîÔ∏è - ' + negative
    if negativeo: negativeo = '\n' + negativeo

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))

    if not stars:
        bot.edit_message_text(
                         f'\n ‚≠êÔ∏è<b><u> C–∏–º–≤–æ–ª—ã –¥–Ω—è –∏ –ª–µ—Ç—è—â–∏–µ –∑–≤—ë–∑–¥—ã </u></b>'
                         f'\n---------------------------------------'
                         f'\n –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
                         ,chat_id=waitfor.chat.id, message_id=waitfor.message_id, reply_markup=markup, parse_mode='html')
    else:
        bot.edit_message_text(
                         f'\n ‚≠êÔ∏è<b> C–∏–º–≤–æ–ª—ã –¥–Ω—è –∏ –ª–µ—Ç—è—â–∏–µ –∑–≤—ë–∑–¥—ã </b>'
                         f'\n---------------------------------------'
                         f' {f"<b>{collision1}</b>" if collision1 else ""}'
                         f' {f"{collision1o}" if collision1 else ""}'
                         f' {f"<b>{collision2}</b>" if collision2 else ""}'
                         f' {f"{collision2o}" if collision2o and collision2 and collision2o != sha1o else ""}'
                         f' {f"<b>{sha1}</b>" if sha1 else ""}'
                         f' {f"{sha1o}" if sha1o and not sha2 else ""}'
                         f' {f"<b>{sha2}</b>" if sha2 else ""}'
                         f' {f"{sha2o}" if not sha1o and sha2o else ""}'
                         f' {f"{sha2o}" if sha2o and sha2 and sha2o == sha1o else ""}'
                         f' {f"<b>{positive1}</b>" if positive1 else ""}'
                         f' {f"{positive1o}" if positive1o and positive1 and positive1o[:-1] != negativeo else ""}'
                         f' {f"<b>{positive2}</b>" if positive2 else ""}'
                         f' {f"{positive2o}" if positive2o else ""}'
                         f' {f"<b>{symbolMKD}</b>" if symbolMKD else ""}'
                         f' {f"<b>{negative}</b>" if negative else ""}'
                         f' {f"{negativeo}" if negativeo else ""}'
                         f' {f"{collision1o}" if not negativeo and negative else ""}'
                         ,chat_id=waitfor.chat.id, message_id=waitfor.message_id, reply_markup=markup, parse_mode='html')

@bot.message_handler(commands=['hour'])
def daytimes(message):
    waitfor = bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ ... ‚åõÔ∏è')
    params, animails = DayAnimals()
    try: # –ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        plus_minus = params.findAll('p', class_='PlusMinus')
    except:
        plus_minus = ''
    try:  # –ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        plus_minuso = params.find('p', class_='PlusMinus').text
    except:
        plus_minuso = ''

    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Å–∞
        Positive = plus_minus[0].find('span', class_='IconPositive')
    except:
        Positive = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Å–∞
        Negative = plus_minus[0].find('span', class_='IconNegative')
    except:
        Negative = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —á–∞—Å
        Negative2 = plus_minus[1].find('span', class_='IconNegative')
    except:
        Negative2 = ''
    try:
        Collision = params.find('p', class_='Collision').text
    except:
        Collision = ''
    try:
        SymbolStars = params.findAll('p', class_='SymbolStars')[0].text
    except:
        SymbolStars = ''
    try:
        SymbolStars1 = params.findAll('p', class_='SymbolStars')[1].text
    except:
        SymbolStars1 = ''
    try:
        SymbolStars2 = params.findAll('p', class_='SymbolStars')[2].text
    except:
        SymbolStars2 = ''
    try:
        SymbolStars3 = params.findAll('p', class_='SymbolStars')[3].text
    except:
        SymbolStars3 = ''

    if Positive: Positive = '\n ‚úÖ  ' + plus_minuso.strip()
    if Negative: Negative = '\n ‚õîÔ∏è  ' + plus_minuso.strip()
    if Negative2: Negative2 = '\n ‚õîÔ∏è  ' + plus_minus[1].text.strip()
    if Collision: Collision = '\n ‚ûñ  ' + Collision.strip()
    if SymbolStars: SymbolStars = '\n -- ' + SymbolStars
    if SymbolStars1: SymbolStars1 = '\n -- ' + SymbolStars1
    if SymbolStars2: SymbolStars2 = '\n -- ' + SymbolStars2
    if SymbolStars3: SymbolStars3 = '\n SymbolStars3 - ' + SymbolStars3

    Negative1 = str(Negative).strip()
    Positive1 = str(Positive).strip()

    ours = Negative1+Positive1

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))

    if not ours:
        bot.edit_message_text(
                         f'\n üïí<b>  –°–µ–π—á–∞—Å {datetime.datetime.now().strftime("%H:%M")} -- {animails}</b>'
                         f'\n'
                         f'\n –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.'
                         f'\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å.'
                         ,chat_id=waitfor.chat.id, message_id=waitfor.message_id, reply_markup=markup, parse_mode='html')
    else:
        bot.edit_message_text(
                         f'\n üïí<b>  –°–µ–π—á–∞—Å {datetime.datetime.now().strftime("%H:%M")} '
                         f'\n{animails}</b>'
                         f'\n--------------------------------------'
                         f' {f"{Positive}" if Positive else ""}'
                         f' {f"{Negative}" if Negative else ""}'
                         f' {f"{Negative2}" if Negative2 else ""}'
                         f' {f"{Collision}" if Collision else ""}'
                         f' {f"{SymbolStars}" if SymbolStars else ""}'
                         f' {f"{SymbolStars1}" if SymbolStars1 else ""}'
                         f' {f"{SymbolStars2}" if SymbolStars2 else ""}'
                         f' {f"{SymbolStars3}" if SymbolStars3 else ""}'
                         ,chat_id=waitfor.chat.id, message_id=waitfor.message_id, reply_markup=markup, parse_mode='html')

# ========================================================================================================
#                       –û–±—Ä–∞–±–æ—Ç–∫–∞  –ó–∞–ø—Ä–æ—Å–æ–≤  Callback
# ========================================================================================================
@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == 'today':
        today(callback.message)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)


    #elif callback.data == 'Ukr':




    elif callback.data == 'hours':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –ö—Ä—ã—Å—ã üêÅ —Å 23:00 –¥–æ 01:00', callback_data='rat'))
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –ë—ã–∫–∞ üêÇ —Å 01:00 –¥–æ 03:00', callback_data='bull'))
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –¢–∏–≥—Ä–∞ üêÖ —Å 03:00 –¥–æ 05:00', callback_data='tiger'))
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –ö—Ä–æ–ª–∏–∫–∞ üêá —Å 05:00 –¥–æ 07:00', callback_data='rabbit'))
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –î—Ä–∞–∫–æ–Ω–∞ üêâ —Å 07:00 –¥–æ 09:00', callback_data='dragon'))
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –ó–º–µ–∏ üêç —Å 09:00 –¥–æ 11:00', callback_data='snake'))
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –õ–æ—à–∞–¥–∏ üêé —Å 11:00 –¥–æ 13:00', callback_data='horse'))
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –ö–æ–∑—ã üêê —Å 13:00 –¥–æ 15:00', callback_data='goat'))
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –û–±–µ–∑—å—è–Ω—ã üêí —Å 15:00 –¥–æ 17:00', callback_data='monkey'))
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –ü–µ—Ç—É—Ö–∞ üêì —Å 17:00 –¥–æ 19:00', callback_data='rooster'))
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –°–æ–±–∞–∫–∏ üêï —Å 19:00 –¥–æ 21:00', callback_data='dog'))
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –°–≤–∏–Ω—å–∏ üêñ —Å 21:00 –¥–æ 23:00', callback_data='pig'))
        markup.add(types.InlineKeyboardButton('–ß–∞—Å –ö—Ä—ã—Å—ã üêÅ —Å 23:00 –¥–æ 01:00', callback_data='rat'))
        bot.edit_message_text(        f'\nüß≠  <b>–í—Å–µ —á–∞—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>'
                                      f'\n  -------------------'
                                      f'\n  –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –¥–≤—É—á–∞—Å–æ–≤–∫—É –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.'
                         ,callback.message.chat.id, callback.message.message_id, parse_mode='html', reply_markup=markup)



    elif callback.data == 'back':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('üìÖ  –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='today')
        markup.row(btn1)
        btn2 = types.InlineKeyboardButton('üåì –õ—É–Ω–Ω—ã–π –î–µ–Ω—å', callback_data='moon')
        btn3 = types.InlineKeyboardButton('Ô∏èÔ∏è‚≠êÔ∏è  –ó–≤—ë–∑–¥—ã', callback_data='stars')
        markup.row(btn2, btn3)
        btn4 = types.InlineKeyboardButton('üß≠ –í—Å–µ —á–∞—Å—ã', callback_data='hours')
        btn5 = types.InlineKeyboardButton('‚ùì –ü–æ–º–æ—â—å', callback_data='help')
        markup.row(btn4, btn5)
        bot.edit_message_text(        f'\nüí°  <b>–ú–µ–Ω—é</b>'
                                      f'\n  ------------'
                                      f'\n  –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.'
                                      f'\n–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–∞ —á–∞—Å –ø–æ –∫–∏—Ç–∞–π—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é.'
                                      f' –ü–æ–∫–∞–∑–∞—Ç—å –ª—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –∏ —É–∑–Ω–∞—Ç—å —Å–∏–º–≤–æ–ª –¥–Ω—è.'
                                      f'\n–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
                         ,callback.message.chat.id, callback.message.message_id, parse_mode='html', reply_markup=markup)


    elif callback.data == 'help':
        help(callback.message)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)

    elif callback.data == 'moon':
        moonday(callback.message)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)

    elif callback.data == 'hour':
        daytimes(callback.message)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)

    elif callback.data == 'stars':
        stars(callback.message)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)

#======================================–ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –¥–ª—è CallBack ========================================================

@bot.message_handler(content_types=['text'])
def fordate(message):
    waitfor = bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ ... ‚åõÔ∏è')
    date_str = message.text.strip().lower()
    try:
        date_obj = datetime.datetime.strptime(date_str, '%d-%m-%Y')
    except ValueError:
        bot.edit_message_text(f'–î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–æ', chat_id=waitfor.chat.id, message_id=waitfor.message_id)
        return
    params = StarsDay(date_str)
    try:
        DSymbol = params.find('h5', class_='CzjanChu').text
    except:
        DSymbol = ''
    try:
        DSymbolo = params.find('p', class_='CzjanChu').text
    except:
        DSymbolo = ''
    try:
        DayPlus = params.find('p', class_='PlusMinus').text
    except:
        DayPlus = ''
    try:
        DayMinus = params.findAll('p', class_='PlusMinus')[1].text
    except:
        DayMinus = ''
    try:
        DMoon = params.find('div', class_='MoonDay').text
    except:
        DMoon = ''
    #================================== –ó–≤—ë–∑–¥—ã ===========================================
    try:  # –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü–∞ (–ù–∞–¥–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å")
        collision1 = params.find('h5', class_='red Collision').text  # .split()[-1]
    except:
        collision1 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—è.
        collision1o = params.findAll('p')[4].text
    except:
        collision1o = ''
    try:  # –í—Ç–æ—Ä–æ–π –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–≤—ã–π –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü–∞ (–ù–∞–¥–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å")
        collision2 = params.findAll('h5', class_='red Collision')[1].text  # .split()[-1]
    except:
        collision2 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—è.
        collision2o = params.findAll('p')[5].text
    except:
        collision2o = ''
    try:  # –ö—Ä–∞—Å–Ω–æ–µ –®–ê –≥–æ–¥–∞
        sha1 = params.find('h5', class_='red Sha').text
    except:
        sha1 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –®–ê
        sha1o = params.find('p', class_='Sha').text
    except:
        sha1o = ''
    try:  # –ö—Ä–∞—Å–Ω–æ–µ –≤—Ç–æ—Ä–æ–µ –®–ê –≥–æ–¥–∞
        sha2 = params.findAll('h5', class_='red Sha')[1].text
    except:
        sha2 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –®–ê
        sha2o = params.findAll('p', class_='Sha')[1].text
    except:
        sha2o = ''
    try:  # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –ó–≤–µ–∑–¥—ã
        positive1 = params.find('h5', class_='positive SymbolStars').text  # –æ—Å—Ç–∞–≤–∏—Ç—å
    except:
        positive1 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        positive1o = params.find('p', class_='SymbolStars').text
    except:
        positive1o = ''
    try:  # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –ó–≤–µ–∑–¥—ã
        positive2 = params.findAll('h5', class_='positive SymbolStars')[1].text
    except:
        positive2 = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        positive2o = params.findAll('p', class_='SymbolStars')[2].text
    except:
        positive2o = ''
    try:  # –°–∏–º–≤–æ–ª MKD
        symbolMKD = params.find('div', class_='SymbolStars MKD').text
    except:
        symbolMKD = ''
    try:  # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –ó–≤–µ–∑–¥—ã
        negative = params.find('h5', class_='negative SymbolStars').text
    except:
        negative = ''
    try:  # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        negativeo = params.findAll('p', class_='SymbolStars')[1].text
    except:
        negativeo = ''

    if collision1: collision1 = '\n ‚õîÔ∏è - ' + collision1.strip()
    if collision1o: collision1o = '\n' + collision1o
    if collision2: collision2 = '\n ‚õîÔ∏è - ' + collision2.strip()
    if collision2o: collision2o = '\n' + collision2o
    if sha1: sha1 = '\n ‚õîÔ∏è - ' + sha1.strip()
    if sha1o: sha1o = '\n' + sha1o.strip()
    if sha2: sha2 = '\n ‚õîÔ∏è - ' + sha2
    if sha2o: sha2o = '\n' + sha2o.strip()
    if positive1: positive1 = '\n ‚úÖ - ' + positive1
    if positive1o: positive1o = '\n' + positive1o
    if positive2: positive2 = '\n ‚úÖ - ' + positive2
    if positive2o: positive2o = '\n' + positive2o
    if symbolMKD: symbolMKD = '\n üÄÑÔ∏è - ' + symbolMKD
    if negative: negative = '\n ‚õîÔ∏è - ' + negative
    if negativeo: negativeo = '\n' + negativeo

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è  –ù–∞–∑–∞–¥', callback_data='back'))
    bot.edit_message_text(              f'\n üóì  <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–∞—Ç—É :   {date_str}</b>'
                                        f'\n-------------------------------'
                                        f'\n  - <b><u> {DSymbol}</u></b>'
                                        f'\n   -  {DSymbolo}'
                                        f'\n -------------------------------------'
                                        f'\n  ‚úÖ -  {DayPlus}'
                                        f'\n  ‚õîÔ∏è -  {DayMinus}'
                                        f'\n -------------------------------------'
                                        f'\n{str(DMoon).strip()}'
                                        f'\n -------------------------------------'
                                        f'\n ‚≠êÔ∏è<b> C–∏–º–≤–æ–ª—ã –¥–Ω—è –∏ –ª–µ—Ç—è—â–∏–µ –∑–≤—ë–∑–¥—ã </b>'
                                        f'\n---------------------------------------'
                                        f' {f"<b>{collision1}</b>" if collision1 else ""}'
                                        f' {f"{collision1o}" if collision1 else ""}'
                                        f' {f"<b>{collision2}</b>" if collision2 else ""}'
                                        f' {f"{collision2o}" if collision2o and collision2 and collision2o != sha1o else ""}'
                                        f' {f"<b>{sha1}</b>" if sha1 else ""}'
                                        f' {f"{sha1o}" if sha1o and not sha2 else ""}'
                                        f' {f"<b>{sha2}</b>" if sha2 else ""}'
                                        f' {f"{sha2o}" if not sha1o and sha2o else ""}'
                                        f' {f"{sha2o}" if sha2o and sha2 and sha2o == sha1o else ""}'
                                        f' {f"<b>{positive1}</b>" if positive1 else ""}'
                                        f' {f"{positive1o}" if positive1o and positive1 and positive1o[:-1] != negativeo else ""}'
                                        f' {f"<b>{positive2}</b>" if positive2 else ""}'
                                        f' {f"{positive2o}" if positive2o else ""}'
                                        f' {f"<b>{symbolMKD}</b>" if symbolMKD else ""}'
                                        f' {f"<b>{negative}</b>" if negative else ""}'
                                        f' {f"{negativeo}" if negativeo else ""}'
                                        f' {f"{collision1o}" if not negativeo and negative else ""}'
                                    ,chat_id=waitfor.chat.id, message_id=waitfor.message_id, reply_markup=markup, parse_mode='html')

bot.polling(none_stop=True)